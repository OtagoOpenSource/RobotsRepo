class FunctionExplainer:
    
    knownFunctions = {"sub": "'sub' is short for 'subroutine'. Use this to group code together which does one logical thing, like turning ninety degrees.",
    "for": "a 'for' loop -- for (initialise, condition, step) -- continues until its condition is false.",
    "while": "a 'while' loop -- while (condition) -- continues until its condition is false.",
    "int": "an 'int' is an 'integer'; a whole number, like 3 or 5.",
    "long": "a 'long' is like an 'int'; but can hold much larger numbers.",
    "!": "'!' means 'not'. So '!true' means false, and '!false' means true.",
    "&&": "'&&' means 'and'. So 'true && true' is true, but 'true && false' is false.",
    "||": "'||' means 'or'. So 'true || false' is true, but 'false || false' is false.",
    ";": "';' at the end of each line tells the compiler that this statement is done.",
    "=": "'=' means 'assignment'. So 'x = 3' assigns x to have the value 3. Do not confuse this with comparison!",
    "==": "'==' means 'comparison'. So '2 == 2' is true, because 2 is equal to 2. '2 == 3' is false, because 2 is not equal to 3. Do not confuse this with assignment!",
    "SetSensorType":" void  SetSensorType (const byte &port, byte type)\n Set sensor type.", "SetSensorMode":" void  SetSensorMode (const byte &port, byte mode)\n Set sensor mode.", "ClearSensor":" void  ClearSensor (const byte &port)\n Clear a sensor value.", "ResetSensor":" void  ResetSensor (const byte &port)\n Reset the sensor port.", "SetSensor":" void  SetSensor (const byte &port, const unsigned int config)\n Set sensor configuration.", "SetSensorTouch":" void  SetSensorTouch (const byte &port)\n Configure a touch sensor.", "SetSensorLight":" void  SetSensorLight (const byte &port, bool bActive=true)\n Configure a light sensor.", "SetSensorSound":" void  SetSensorSound (const byte &port, bool bdBScaling=true)\n Configure a sound sensor.", "SetSensorLowspeed":" void  SetSensorLowspeed (const byte &port, bool bIsPowered=true)\n Configure an I2C sensor.", "SetSensorUltrasonic":" void  SetSensorUltrasonic (const byte &port)\n Configure an ultrasonic sensor.", "SetSensorEMeter":" void  SetSensorEMeter (const byte &port)\n Configure an EMeter sensor.", "SetSensorTemperature":" void  SetSensorTemperature (const byte &port)\n Configure a temperature sensor.", "SetSensorColorFull":" void  SetSensorColorFull (const byte &port)\n Configure an NXT 2.0 full color sensor.", "SetSensorColorRed":" void  SetSensorColorRed (const byte &port)\n Configure an NXT 2.0 red light sensor.", "SetSensorColorGreen":" void  SetSensorColorGreen (const byte &port)\n Configure an NXT 2.0 green light sensor.", "SetSensorColorBlue":" void  SetSensorColorBlue (const byte &port)\n Configure an NXT 2.0 blue light sensor.", "SetSensorColorNone":" void  SetSensorColorNone (const byte &port)\n Configure an NXT 2.0 no light sensor.", "GetInput":" variant   GetInput (const byte &port, const byte field)\n Get an input field value.", "SetInput":" void  SetInput (const byte &port, const int field, variant value)\n Set an input field value.", "Sensor":" unsigned int  Sensor (const byte &port)\n Read sensor scaled value.", "SensorBoolean":" bool  SensorBoolean (const byte port)\n Read sensor boolean value.", "SensorDigiPinsDirection":" byte  SensorDigiPinsDirection (const byte port)\n Read sensor digital pins direction.", "SensorDigiPinsOutputLevel":" byte  SensorDigiPinsOutputLevel (const byte port)\n Read sensor digital pins output level.", "SensorDigiPinsStatus":" byte  SensorDigiPinsStatus (const byte port)\n Read sensor digital pins status.", "SensorInvalid":" bool  SensorInvalid (const byte &port)\n Read sensor invalid data flag.", "SensorMode":" byte  SensorMode (const byte &port)\n Read sensor mode.", "SensorNormalized":" unsigned int  SensorNormalized (const byte &port)\n Read sensor normalized value.", "SensorRaw":" unsigned int  SensorRaw (const byte &port)\n Read sensor raw value.", "SensorScaled":" unsigned int  SensorScaled (const byte &port)\n Read sensor scaled value.", "SensorType":" byte  SensorType (const byte &port)\n Read sensor type.", "SensorValue":" unsigned int  SensorValue (const byte &port)\n Read sensor scaled value.", "SensorValueBool":" bool  SensorValueBool (const byte port)\n Read sensor boolean value.", "SensorValueRaw":" unsigned int  SensorValueRaw (const byte &port)\n Read sensor raw value.", "CustomSensorActiveStatus":" byte  CustomSensorActiveStatus (byte port)\n Get the custom sensor active status.", "CustomSensorPercentFullScale":" byte  CustomSensorPercentFullScale (byte port)\n Get the custom sensor percent full scale.", "CustomSensorZeroOffset":" unsigned int  CustomSensorZeroOffset (byte port)\n Get the custom sensor zero offset.", "SetCustomSensorActiveStatus":" void  SetCustomSensorActiveStatus (byte port, byte activeStatus)\n Set active status.", "SetCustomSensorPercentFullScale":" void  SetCustomSensorPercentFullScale (byte port, byte pctFullScale)\n Set percent full scale.", "SetCustomSensorZeroOffset":" void  SetCustomSensorZeroOffset (byte port, int zeroOffset)\n Set custom zero offset.", "SetSensorBoolean":" void  SetSensorBoolean (byte port, bool value)\n Set sensor boolean value.", "SetSensorDigiPinsDirection":" void  SetSensorDigiPinsDirection (byte port, byte direction)\n Set digital pins direction.", "SetSensorDigiPinsOutputLevel":" void  SetSensorDigiPinsOutputLevel (byte port, byte outputLevel)\n Set digital pins output level.", "SetSensorDigiPinsStatus":" void  SetSensorDigiPinsStatus (byte port, byte status)\n Set digital pins status.", "SysColorSensorRead":" void  SysColorSensorRead (ColorSensorReadType &args)\n Read LEGO color sensor.", "ReadSensorColorEx":" int   ReadSensorColorEx (const byte &port, int &colorval, unsigned int &raw[], unsigned int &norm[], int &scaled[])\n Read LEGO color sensor extra.", "ReadSensorColorRaw":" int   ReadSensorColorRaw (const byte &port, unsigned int &rawVals[])\n Read LEGO color sensor raw values.", "ColorADRaw":" unsigned int  ColorADRaw (byte port, byte color)\n Read a LEGO color sensor AD raw value.", "ColorBoolean":" bool  ColorBoolean (byte port, byte color)\n Read a LEGO color sensor boolean value.", "ColorCalibration":" long  ColorCalibration (byte port, byte point, byte color)\n Read a LEGO color sensor calibration point value.", "ColorCalibrationState":" byte  ColorCalibrationState (byte port)\n Read LEGO color sensor calibration state.", "ColorCalLimits":" unsigned int  ColorCalLimits (byte port, byte point)\n Read a LEGO color sensor calibration limit value.", "ColorSensorRaw":" unsigned int  ColorSensorRaw (byte port, byte color)\n Read a LEGO color sensor raw value.", "ColorSensorValue":" unsigned int  ColorSensorValue (byte port, byte color)\n Read a LEGO color sensor scaled value.", "SysInputPinFunction":" void  SysInputPinFunction (InputPinFunctionType &args)\n Execute the Input module pin function.", "SetMotorPwnFreq":" void  SetMotorPwnFreq (byte n)\n Set motor regulation frequency.", "SetMotorRegulationTime":" void  SetMotorRegulationTime (byte n)\n Set regulation time.", "SetMotorRegulationOptions":" void  SetMotorRegulationOptions (byte n)\n Set regulation options.", "OnFwdSyncPID":" void  OnFwdSyncPID (byte outputs, char pwr, char turnpct, byte p, byte i, byte d)\n Run motors forward synchronised with PID factors.", "OnFwdSyncExPID":" void  OnFwdSyncExPID (byte outputs, char pwr, char turnpct, const byte reset, byte p, byte i, byte d)\n Run motors forward synchronised and reset counters with PID factors.", "OnRevSyncPID":" void  OnRevSyncPID (byte outputs, char pwr, char turnpct, byte p, byte i, byte d)\n Run motors backward synchronised with PID factors.", "OnRevSyncExPID":" void  OnRevSyncExPID (byte outputs, char pwr, char turnpct, const byte reset, byte p, byte i, byte d)\n Run motors backward synchronised and reset counters with PID factors.", "OnFwdRegPID":" void  OnFwdRegPID (byte outputs, char pwr, byte regmode, byte p, byte i, byte d)\n Run motors forward regulated with PID factors.", "OnFwdRegExPID":" void  OnFwdRegExPID (byte outputs, char pwr, byte regmode, const byte reset, byte p, byte i, byte d)\n Run motors forward regulated and reset counters with PID factors.", "OnRevRegPID":" void  OnRevRegPID (byte outputs, char pwr, byte regmode, byte p, byte i, byte d)\n Run motors reverse regulated with PID factors.", "OnRevRegExPID":" void  OnRevRegExPID (byte outputs, char pwr, byte regmode, const byte reset, byte p, byte i, byte d)\n Run motors backward regulated and reset counters with PID factors.", "Off":" void  Off (byte outputs)\n Turn motors off.", "OffEx":" void  OffEx (byte outputs, const byte reset)\n Turn motors off and reset counters.", "Coast":" void  Coast (byte outputs)\n Coast motors.", "CoastEx":" void  CoastEx (byte outputs, const byte reset)\n Coast motors and reset counters.", "Float":" void  Float (byte outputs)\n Float motors.", "OnFwd":" void  OnFwd (byte outputs, char pwr)\n Run motors forward.", "OnFwdEx":" void  OnFwdEx (byte outputs, char pwr, const byte reset)\n Run motors forward and reset counters.", "OnRev":" void  OnRev (byte outputs, char pwr)\n Run motors backward.", "OnRevEx":" void  OnRevEx (byte outputs, char pwr, const byte reset)\n Run motors backward and reset counters.", "OnFwdReg":" void  OnFwdReg (byte outputs, char pwr, byte regmode)\n Run motors forward regulated.", "OnFwdRegEx":" void  OnFwdRegEx (byte outputs, char pwr, byte regmode, const byte reset)\n Run motors forward regulated and reset counters.", "OnRevReg":" void  OnRevReg (byte outputs, char pwr, byte regmode)\n Run motors forward regulated.", "OnRevRegEx":" void  OnRevRegEx (byte outputs, char pwr, byte regmode, const byte reset)\n Run motors backward regulated and reset counters.", "OnFwdSync":" void  OnFwdSync (byte outputs, char pwr, char turnpct)\n Run motors forward synchronised.", "OnFwdSyncEx":" void  OnFwdSyncEx (byte outputs, char pwr, char turnpct, const byte reset)\n Run motors forward synchronised and reset counters.", "OnRevSync":" void  OnRevSync (byte outputs, char pwr, char turnpct)\n Run motors backward synchronised.", "OnRevSyncEx":" void  OnRevSyncEx (byte outputs, char pwr, char turnpct, const byte reset)\n Run motors backward synchronised and reset counters.", "RotateMotor":" void  RotateMotor (byte outputs, char pwr, long angle)\n Rotate motor.", "RotateMotorPID":" void  RotateMotorPID (byte outputs, char pwr, long angle, byte p, byte i, byte d)\n Rotate motor with PID factors.", "RotateMotorEx":" void  RotateMotorEx (byte outputs, char pwr, long angle, char turnpct, bool sync, bool stop)\n Rotate motor Ex.", "RotateMotorExPID":" void  RotateMotorExPID (byte outputs, char pwr, long angle, char turnpct, bool sync, bool stop, byte p, byte i, byte d)\n Rotate motor Ex with PID factors.", "ResetTachoCount":" void  ResetTachoCount (byte outputs)\n Reset tachometer counter.", "ResetBlockTachoCount":" void  ResetBlockTachoCount (byte outputs)\n Reset block-relative counter.", "ResetRotationCount":" void  ResetRotationCount (byte outputs)\n Reset program-relative counter.", "ResetAllTachoCounts":" void  ResetAllTachoCounts (byte outputs)\n Reset all tachometer counters.", "SetOutput":" void  SetOutput (byte outputs, byte field1, variant val1,..., byte fieldN, variant valN)\n Set output fields.", "GetOutput":" variant   GetOutput (byte output, const byte field)\n Get output field value.", "MotorMode":" byte  MotorMode (byte output)\n Get motor mode.", "MotorPower":" char  MotorPower (byte output)\n Get motor power level.", "MotorActualSpeed":" char  MotorActualSpeed (byte output)\n Get motor actual speed.", "MotorTachoCount":" long  MotorTachoCount (byte output)\n Get motor tachometer counter.", "MotorTachoLimit":" long  MotorTachoLimit (byte output)\n Get motor tachometer limit.", "MotorRunState":" byte  MotorRunState (byte output)\n Get motor run state.", "MotorTurnRatio":" char  MotorTurnRatio (byte output)\n Get motor turn ratio.", "MotorRegulation":" byte  MotorRegulation (byte output)\n Get motor regulation mode.", "MotorOverload":" bool  MotorOverload (byte output)\n Get motor overload status.", "MotorRegPValue":" byte  MotorRegPValue (byte output)\n Get motor P value.", "MotorRegIValue":" byte  MotorRegIValue (byte output)\n Get motor I value.", "MotorRegDValue":" byte  MotorRegDValue (byte output)\n Get motor D value.", "MotorBlockTachoCount":" long  MotorBlockTachoCount (byte output)\n Get motor block-relative counter.", "MotorRotationCount":" long  MotorRotationCount (byte output)\n Get motor program-relative counter.", "MotorOutputOptions":" byte  MotorOutputOptions (byte output)\n Get motor options.", "MotorMaxSpeed":" byte  MotorMaxSpeed (byte output)\n Get motor max speed.", "MotorMaxAcceleration":" byte  MotorMaxAcceleration (byte output)\n Get motor max acceleration.", "MotorPwnFreq":" byte  MotorPwnFreq ()\n Get motor regulation frequency.", "MotorRegulationTime":" byte  MotorRegulationTime ()\n Get motor regulation time.", "MotorRegulationOptions":" byte  MotorRegulationOptions ()\n Get motor regulation options.", "ResetScreen":" void  ResetScreen ()\n Reset LCD screen.", "CircleOut":" char  CircleOut (int x, int y, byte radius, unsigned long options=DRAW_OPT_NORMAL)\n Draw a circle.", "LineOut":" char  LineOut (int x1, int y1, int x2, int y2, unsigned long options=DRAW_OPT_NORMAL)\n Draw a line.", "PointOut":" char  PointOut (int x, int y, unsigned long options=DRAW_OPT_NORMAL)\n Draw a point.", "RectOut":" char  RectOut (int x, int y, int width, int height, unsigned long options=DRAW_OPT_NORMAL)\n Draw a rectangle.", "TextOut":" char  TextOut (int x, int y, string str, unsigned long options=DRAW_OPT_NORMAL)\n Draw text.", "NumOut":" char  NumOut (int x, int y, variant value, unsigned long options=DRAW_OPT_NORMAL)\n Draw a number.", "EllipseOut":" char  EllipseOut (int x, int y, byte radiusX, byte radiusY, unsigned long options=DRAW_OPT_NORMAL)\n Draw an ellipse.", "PolyOut":" char  PolyOut (LocationType points[], unsigned long options=DRAW_OPT_NORMAL)\n Draw a polygon.", "FontTextOut":" char  FontTextOut (int x, int y, string filename, string str, unsigned long options=DRAW_OPT_NORMAL)\n Draw text with font.", "FontNumOut":" char  FontNumOut (int x, int y, string filename, variant value, unsigned long options=DRAW_OPT_NORMAL)\n Draw a number with font.", "GraphicOut":" char  GraphicOut (int x, int y, string filename, unsigned long options=DRAW_OPT_NORMAL)\n Draw a graphic image.", "GraphicArrayOut":" char  GraphicArrayOut (int x, int y, byte data[], unsigned long options=DRAW_OPT_NORMAL)\n Draw a graphic image from byte array.", "GraphicOutEx":" char  GraphicOutEx (int x, int y, string filename, byte vars[], unsigned long options=DRAW_OPT_NORMAL)\n Draw a graphic image with parameters.", "GraphicArrayOutEx":" char  GraphicArrayOutEx (int x, int y, byte data[], byte vars[], unsigned long options=DRAW_OPT_NORMAL)\n Draw a graphic image from byte array with parameters.", "GetDisplayNormal":" void  GetDisplayNormal (const byte x, const byte line, unsigned int cnt, byte &data[])\n Read pixel data from the normal display buffer.", "SetDisplayNormal":" void  SetDisplayNormal (const byte x, const byte line, unsigned int cnt, byte data[])\n Write pixel data to the normal display buffer.", "GetDisplayPopup":" void  GetDisplayPopup (const byte x, const byte line, unsigned int cnt, byte &data[])\n Read pixel data from the popup display buffer.", "SetDisplayPopup":" void  SetDisplayPopup (const byte x, const byte line, unsigned int cnt, byte data[])\n Write pixel data to the popup display buffer.", "DisplayEraseMask":" unsigned long   DisplayEraseMask ()\n Read the display erase mask value.", "DisplayUpdateMask":" unsigned long   DisplayUpdateMask ()\n Read the display update mask value.", "DisplayFont":" unsigned long   DisplayFont ()\n Read the display font memory address.", "DisplayDisplay":" unsigned long   DisplayDisplay ()\n Read the display memory address.", "DisplayFlags":" byte  DisplayFlags ()\n Read the display flags.", "DisplayTextLinesCenterFlags":" byte  DisplayTextLinesCenterFlags ()\n Read the display text lines center flags.", "SysDrawText":" void  SysDrawText (DrawTextType &args)\n Draw text.", "SysDrawPoint":" void  SysDrawPoint (DrawPointType &args)\n Draw a point.", "SysDrawLine":" void  SysDrawLine (DrawLineType &args)\n Draw a line.", "SysDrawCircle":" void  SysDrawCircle (DrawCircleType &args)\n Draw a circle.", "SysDrawRect":" void  SysDrawRect (DrawRectType &args)\n Draw a rectangle.", "SysDrawGraphic":" void  SysDrawGraphic (DrawGraphicType &args)\n Draw a graphic (RIC file).", "SysSetScreenMode":" void  SysSetScreenMode (SetScreenModeType &args)\n Set the screen mode.", "SysDisplayExecuteFunction":" void  SysDisplayExecuteFunction (DisplayExecuteFunctionType &args)\n Execute any Display module command.", "DisplayContrast":" byte  DisplayContrast ()\n Read the display contrast setting.", "SysDrawGraphicArray":" void  SysDrawGraphicArray (DrawGraphicArrayType &args)\n Draw a graphic image from a byte array.", "SysDrawPolygon":" void  SysDrawPolygon (DrawPolygonType &args)\n Draw a polygon.", "SysDrawEllipse":" void  SysDrawEllipse (DrawEllipseType &args)\n Draw an ellipse.", "SysDrawFont":" void  SysDrawFont (DrawFontType &args)\n Draw text using a custom font.", "ClearScreen":" void  ClearScreen ()\n Clear LCD screen.", "ClearLine":" void  ClearLine (byte line)\n Clear a line on the LCD screen.", "SetDisplayFont":" void  SetDisplayFont (unsigned long fontaddr)\n Set the display font memory address.", "SetDisplayDisplay":" void  SetDisplayDisplay (unsigned long dispaddr)\n Set the display memory address.", "SetDisplayEraseMask":" void  SetDisplayEraseMask (unsigned long eraseMask)\n Set the display erase mask.", "SetDisplayFlags":" void  SetDisplayFlags (byte flags)\n Set the display flags.", "SetDisplayTextLinesCenterFlags":" void  SetDisplayTextLinesCenterFlags (byte ctrFlags)\n Set the display text lines center flags.", "SetDisplayUpdateMask":" void  SetDisplayUpdateMask (unsigned long updateMask)\n Set the display update mask.", "SetDisplayContrast":" void  SetDisplayContrast (byte contrast)\n Set the display contrast.", "PlayFile":" char  PlayFile (string filename)\n Play a file.", "PlayFileEx":" char  PlayFileEx (string filename, byte volume, bool loop, unsigned int sr=0)\n Play a file with extra options.", "PlayTone":" char  PlayTone (unsigned int frequency, unsigned int duration)\n Play a tone.", "PlayToneEx":" char  PlayToneEx (unsigned int frequency, unsigned int duration, byte volume, bool loop)\n Play a tone with extra options.", "SoundState":" byte  SoundState ()\n Get sound module state.", "SoundFlags":" byte  SoundFlags ()\n Get sound module flags.", "StopSound":" byte  StopSound ()\n Stop sound.", "SoundFrequency":" unsigned int  SoundFrequency ()\n Get sound frequency.", "SoundDuration":" unsigned int  SoundDuration ()\n Get sound duration.", "SoundSampleRate":" unsigned int  SoundSampleRate ()\n Get sample rate.", "SoundMode":" byte  SoundMode ()\n Get sound mode.", "SoundVolume":" byte  SoundVolume ()\n Get volume.", "SetSoundDuration":" void  SetSoundDuration (unsigned int duration)\n Set sound duration.", "SetSoundFlags":" void  SetSoundFlags (byte flags)\n Set sound module flags.", "SetSoundFrequency":" void  SetSoundFrequency (unsigned int frequency)\n Set sound frequency.", "SetSoundMode":" void  SetSoundMode (byte mode)\n Set sound mode.", "SetSoundModuleState":" void  SetSoundModuleState (byte state)\n Set sound module state.", "SetSoundSampleRate":" void  SetSoundSampleRate (unsigned int sampleRate)\n Set sample rate.", "SetSoundVolume":" void  SetSoundVolume (byte volume)\n Set sound volume.", "SysSoundPlayFile":" void  SysSoundPlayFile (SoundPlayFileType &args)\n Play sound file.", "SysSoundPlayTone":" void  SysSoundPlayTone (SoundPlayToneType &args)\n Play tone.", "SysSoundGetState":" void  SysSoundGetState (SoundGetStateType &args)\n Get sound state.", "SysSoundSetState":" void  SysSoundSetState (SoundSetStateType &args)\n Set sound state.", "PlaySound":" void  PlaySound (const int &aCode)\n Play a system sound.", "PlayTones":" void  PlayTones (Tone tones[])\n Play multiple tones.", "SensorUS":" byte  SensorUS (const byte port)\n Read ultrasonic sensor value.", "SensorUS0":" byte  SensorUS0 (const byte port)\n Read ultrasonic sensor value without wait.", "SensorUSWait":" byte  SensorUSWait (const byte port, const byte wait)\n Read ultrasonic sensor value with specified wait.", "ReadSensorUSEx":" char  ReadSensorUSEx (const byte port, byte &values[])\n Read multiple ultrasonic sensor values.", "ReadSensorUSEx0":" char  ReadSensorUSEx0 (const byte port, byte &values[])\n Read multiple ultrasonic sensor values without wait.", "ReadSensorUSExWait":" char  ReadSensorUSExWait (const byte port, byte &values[], const byte wait)\n Read multiple ultrasonic sensor values with specified wait.", "ReadSensorEMeter":" char  ReadSensorEMeter (const byte &port, float &vIn, float &aIn, float &vOut, float &aOut, int &joules, float &wIn, float &wOut)\n Read the LEGO EMeter values.", "ConfigureTemperatureSensor":" char  ConfigureTemperatureSensor (const byte &port, const byte &config)\n Configure LEGO Temperature sensor options.", "SensorTemperature":" float   SensorTemperature (const byte &port)\n Read the LEGO Temperature sensor value.", "LowspeedStatus":" long  LowspeedStatus (const byte port, byte &bytesready)\n Get lowspeed status.", "LowspeedCheckStatus":" long  LowspeedCheckStatus (const byte port)\n Check lowspeed status.", "LowspeedBytesReady":" byte  LowspeedBytesReady (const byte port)\n Get lowspeed bytes ready.", "LowspeedWrite":" long  LowspeedWrite (const byte port, byte retlen, byte buffer[])\n Write lowspeed data.", "LowspeedRead":" long  LowspeedRead (const byte port, byte buflen, byte &buffer[])\n Read lowspeed data.", "I2CStatus":" long  I2CStatus (const byte port, byte &bytesready)\n Get I2C status.", "I2CCheckStatus":" long  I2CCheckStatus (const byte port)\n Check I2C status.", "I2CBytesReady":" byte  I2CBytesReady (const byte port)\n Get I2C bytes ready.", "I2CWrite":" long  I2CWrite (const byte port, byte retlen, byte buffer[])\n Write I2C data.", "I2CRead":" long  I2CRead (const byte port, byte buflen, byte &buffer[])\n Read I2C data.", "I2CBytes":" long  I2CBytes (const byte port, byte inbuf[], byte &count, byte &outbuf[])\n Perform an I2C write/read transaction.", "ReadI2CRegister":" char  ReadI2CRegister (byte port, byte i2caddr, byte reg, byte &out)\n Read I2C register.", "WriteI2CRegister":" char  WriteI2CRegister (byte port, byte i2caddr, byte reg, byte val)\n Write I2C register.", "I2CDeviceInfo":" string  I2CDeviceInfo (byte port, byte i2caddr, byte info)\n Read I2C device information.", "I2CVersion":" string  I2CVersion (byte port, byte i2caddr)\n Read I2C device version.", "I2CVendorId":" string  I2CVendorId (byte port, byte i2caddr)\n Read I2C device vendor.", "I2CDeviceId":" string  I2CDeviceId (byte port, byte i2caddr)\n Read I2C device identifier.", "I2CSendCommand":" long  I2CSendCommand (byte port, byte i2caddr, byte cmd)\n Send an I2C command.", "GetLSInputBuffer":" void  GetLSInputBuffer (const byte port, const byte offset, byte cnt, byte &data[])\n Get I2C input buffer data.", "GetLSOutputBuffer":" void  GetLSOutputBuffer (const byte port, const byte offset, byte cnt, byte &data[])\n Get I2C output buffer data.", "LSInputBufferInPtr":" byte  LSInputBufferInPtr (const byte port)\n Get I2C input buffer in-pointer.", "LSInputBufferOutPtr":" byte  LSInputBufferOutPtr (const byte port)\n Get I2C input buffer out-pointer.", "LSInputBufferBytesToRx":" byte  LSInputBufferBytesToRx (const byte port)\n Get I2C input buffer bytes to rx.", "LSOutputBufferInPtr":" byte  LSOutputBufferInPtr (const byte port)\n Get I2C output buffer in-pointer.", "LSOutputBufferOutPtr":" byte  LSOutputBufferOutPtr (const byte port)\n Get I2C output buffer out-pointer.", "LSOutputBufferBytesToRx":" byte  LSOutputBufferBytesToRx (const byte port)\n Get I2C output buffer bytes to rx.", "LSMode":" byte  LSMode (const byte port)\n Get I2C mode.", "LSChannelState":" byte  LSChannelState (const byte port)\n Get I2C channel state.", "LSErrorType":" byte  LSErrorType (const byte port)\n Get I2C error type.", "LSState":" byte  LSState ()\n Get I2C state.", "LSSpeed":" byte  LSSpeed ()\n Get I2C speed.", "LSNoRestartOnRead":" byte  LSNoRestartOnRead ()\n Get I2C no restart on read setting.", "SetI2COptions":" void  SetI2COptions (byte port, byte options)\n Set I2C options.", "SysCommLSWrite":" void  SysCommLSWrite (CommLSWriteType &args)\n Write to a Lowspeed sensor.", "SysCommLSRead":" void  SysCommLSRead (CommLSReadType &args)\n Read from a Lowspeed sensor.", "SysCommLSCheckStatus":" void  SysCommLSCheckStatus (CommLSCheckStatusType &args)\n Check Lowspeed sensor status.", "SysCommLSWriteEx":" void  SysCommLSWriteEx (CommLSWriteExType &args)\n Write to a Lowspeed sensor (extra).", "CurrentTick":" unsigned long   CurrentTick ()\n Read the current system tick.", "FirstTick":" unsigned long   FirstTick ()\n Get the first tick.", "ResetSleepTimer":" long  ResetSleepTimer ()\n Reset the sleep timer.", "SysCall":" void  SysCall (byte funcID, variant &args)\n Call any system function.", "SysGetStartTick":" void  SysGetStartTick (GetStartTickType &args)\n Get start tick.", "SysKeepAlive":" void  SysKeepAlive (KeepAliveType &args)\n Keep alive.", "SysIOMapRead":" void  SysIOMapRead (IOMapReadType &args)\n Read from IOMap by name.", "SysIOMapWrite":" void  SysIOMapWrite (IOMapWriteType &args)\n Write to IOMap by name.", "SysIOMapReadByID":" void  SysIOMapReadByID (IOMapReadByIDType &args)\n Read from IOMap by identifier.", "SysIOMapWriteByID":" void  SysIOMapWriteByID (IOMapWriteByIDType &args)\n Write to IOMap by identifier.", "SysDatalogWrite":" void  SysDatalogWrite (DatalogWriteType &args)\n Write to the datalog.", "SysDatalogGetTimes":" void  SysDatalogGetTimes (DatalogGetTimesType &args)\n Get datalog times.", "SysReadSemData":" void  SysReadSemData (ReadSemDataType &args)\n Read semaphore data.", "SysWriteSemData":" void  SysWriteSemData (WriteSemDataType &args)\n Write semaphore data.", "SysUpdateCalibCacheInfo":" void  SysUpdateCalibCacheInfo (UpdateCalibCacheInfoType &args)\n Update calibration cache information.", "SysComputeCalibValue":" void  SysComputeCalibValue (ComputeCalibValueType &args)\n Compute calibration values.", "GetMemoryInfo":" char  GetMemoryInfo (bool Compact, unsigned int &PoolSize, unsigned int &DataspaceSize)\n Read memory information.", "SysMemoryManager":" void  SysMemoryManager (MemoryManagerType &args)\n Read memory information.", "GetLastResponseInfo":" char  GetLastResponseInfo (bool Clear, byte &Length, byte &Command, byte &Buffer[])\n Read last response information.", "SysReadLastResponse":" void  SysReadLastResponse (ReadLastResponseType &args)\n Read last response information.", "Wait":" void  Wait (unsigned long ms)\n Wait some milliseconds.", "Yield":" void  Yield ()\n Yield to another task.", "StopAllTasks":" void  StopAllTasks ()\n Stop all tasks.", "Stop":" void  Stop (bool bvalue)\n Stop the running program.", "ExitTo":" void  ExitTo (task newTask)\n Exit to another task.", "Precedes":" void  Precedes (task task1, task task2,..., task taskN)\n Declare tasks that this task precedes.", "Follows":" void  Follows (task task1, task task2,..., task taskN)\n Declare tasks that this task follows.", "Acquire":" void  Acquire (mutex m)\n Acquire a mutex.", "Release":" void  Release (mutex m)\n Acquire a mutex.", "StartTask":" void  StartTask (task t)\n Start a task.", "StopTask":" void  StopTask (task t)\n Stop a task.", "BranchTest":" void  BranchTest (const byte cmp, constant void lbl, variant value)\n Branch if test is true.", "BranchComp":" void  BranchComp (const byte cmp, constant void lbl, variant v1, variant v2)\n Branch if compare is true.", "ArrayBuild":" void  ArrayBuild (variant &aout[], variant src1, variant src2,..., variant srcN)\n Build an array.", "ArrayLen":" unsigned int  ArrayLen (variant data[])\n Get array length.", "ArrayInit":" void  ArrayInit (variant &aout[], variant value, unsigned int count)\n Initialize an array.", "ArraySubset":" void  ArraySubset (variant &aout[], variant asrc[], unsigned int idx, unsigned int len)\n Copy an array subset.", "ArrayIndex":" void  ArrayIndex (variant &out, variant asrc[], unsigned int idx)\n Extract item from an array.", "ArrayReplace":" void  ArrayReplace (variant &asrc[], unsigned int idx, variant value)\n Replace items in an array.", "ArraySum":" variant   ArraySum (const variant &src[], unsigned int idx, unsigned int len)\n Calculate the sum of the elements in a numeric array.", "ArrayMean":" variant   ArrayMean (const variant &src[], unsigned int idx, unsigned int len)\n Calculate the mean of the elements in a numeric array.", "ArraySumSqr":" variant   ArraySumSqr (const variant &src[], unsigned int idx, unsigned int len)\n Calculate the sum of the squares of the elements in a numeric array.", "ArrayStd":" variant   ArrayStd (const variant &src[], unsigned int idx, unsigned int len)\n Calculate the standard deviation of the elements in a numeric array.", "ArrayMin":" variant   ArrayMin (const variant &src[], unsigned int idx, unsigned int len)\n Calculate the minimum of the elements in a numeric array.", "ArrayMax":" variant   ArrayMax (const variant &src[], unsigned int idx, unsigned int len)\n Calculate the maximum of the elements in a numeric array.", "ArraySort":" void  ArraySort (variant &dest[], const variant &src[], unsigned int idx, unsigned int len)\n Sort the elements in a numeric array.", "UpperCase":" string  UpperCase (string src)\n Uppercase the characters in a string.", "LowerCase":" string  LowerCase (string src)\n Lowercase the characters in a string.", "UpperCaseEx":" string  UpperCaseEx (string src, unsigned int idx, unsigned int len)\n Uppercase some of the characters in a string.", "LowerCaseEx":" string  LowerCaseEx (string src, unsigned int idx, unsigned int len)\n Lowercase some of the characters in a string.", "ArrayOp":" void  ArrayOp (const byte op, variant &dest, const variant &src[], unsigned int idx, unsigned int len)\n Operate on numeric arrays.", "SetIOMapBytes":" void  SetIOMapBytes (string moduleName, unsigned int offset, unsigned int count, byte data[])\n Set IOMap bytes by name.", "SetIOMapValue":" void  SetIOMapValue (string moduleName, unsigned int offset, variant value)\n Set IOMap value by name.", "GetIOMapBytes":" void  GetIOMapBytes (string moduleName, unsigned int offset, unsigned int count, byte &data[])\n Get IOMap bytes by name.", "GetIOMapValue":" void  GetIOMapValue (string moduleName, unsigned int offset, variant &value)\n Get IOMap value by name.", "GetLowSpeedModuleBytes":" void  GetLowSpeedModuleBytes (unsigned int offset, unsigned int count, byte &data[])\n Get Lowspeed module IOMap bytes.", "GetDisplayModuleBytes":" void  GetDisplayModuleBytes (unsigned int offset, unsigned int count, byte &data[])\n Get Display module IOMap bytes.", "GetCommModuleBytes":" void  GetCommModuleBytes (unsigned int offset, unsigned int count, byte &data[])\n Get Comm module IOMap bytes.", "GetCommandModuleBytes":" void  GetCommandModuleBytes (unsigned int offset, unsigned int count, byte &data[])\n Get Command module IOMap bytes.", "SetCommandModuleBytes":" void  SetCommandModuleBytes (unsigned int offset, unsigned int count, byte data[])\n Set Command module IOMap bytes.", "SetLowSpeedModuleBytes":" void  SetLowSpeedModuleBytes (unsigned int offset, unsigned int count, byte data[])\n Set Lowspeed module IOMap bytes.", "SetDisplayModuleBytes":" void  SetDisplayModuleBytes (unsigned int offset, unsigned int count, byte data[])\n Set Display module IOMap bytes.", "SetCommModuleBytes":" void  SetCommModuleBytes (unsigned int offset, unsigned int count, byte data[])\n Set Comm module IOMap bytes.", "SetSoundModuleBytes":" void  SetSoundModuleBytes (unsigned int offset, unsigned int count, byte data[])\n Set Sound module IOMap bytes.", "SetIOMapBytesByID":" void  SetIOMapBytesByID (unsigned long moduleId, unsigned int offset, unsigned int count, byte data[])\n Set IOMap bytes by ID.", "SetIOMapValueByID":" void  SetIOMapValueByID (unsigned long moduleId, unsigned int offset, variant value)\n Set IOMap value by ID.", "GetIOMapBytesByID":" void  GetIOMapBytesByID (unsigned long moduleId, unsigned int offset, unsigned int count, byte &data[])\n Get IOMap bytes by ID.", "GetIOMapValueByID":" void  GetIOMapValueByID (unsigned long moduleId, unsigned int offset, variant &value)\n Get IOMap value by ID.", "SetCommandModuleValue":" void  SetCommandModuleValue (unsigned int offset, variant value)\n Set Command module IOMap value.", "SetIOCtrlModuleValue":" void  SetIOCtrlModuleValue (unsigned int offset, variant value)\n Set IOCtrl module IOMap value.", "SetLoaderModuleValue":" void  SetLoaderModuleValue (unsigned int offset, variant value)\n Set Loader module IOMap value.", "SetUIModuleValue":" void  SetUIModuleValue (unsigned int offset, variant value)\n Set Ui module IOMap value.", "SetSoundModuleValue":" void  SetSoundModuleValue (unsigned int offset, variant value)\n Set Sound module IOMap value.", "SetButtonModuleValue":" void  SetButtonModuleValue (unsigned int offset, variant value)\n Set Button module IOMap value.", "SetInputModuleValue":" void  SetInputModuleValue (unsigned int offset, variant value)\n Set Input module IOMap value.", "SetOutputModuleValue":" void  SetOutputModuleValue (unsigned int offset, variant value)\n Set Output module IOMap value.", "SetLowSpeedModuleValue":" void  SetLowSpeedModuleValue (unsigned int offset, variant value)\n Set Lowspeed module IOMap value.", "SetDisplayModuleValue":" void  SetDisplayModuleValue (unsigned int offset, variant value)\n Set Display module IOMap value.", "SetCommModuleValue":" void  SetCommModuleValue (unsigned int offset, variant value)\n Set Comm module IOMap value.", "GetCommandModuleValue":" void  GetCommandModuleValue (unsigned int offset, variant &value)\n Get Command module IOMap value.", "GetLoaderModuleValue":" void  GetLoaderModuleValue (unsigned int offset, variant &value)\n Get Loader module IOMap value.", "GetSoundModuleValue":" void  GetSoundModuleValue (unsigned int offset, variant &value)\n Get Sound module IOMap value.", "GetButtonModuleValue":" void  GetButtonModuleValue (unsigned int offset, variant &value)\n Get Button module IOMap value.", "GetUIModuleValue":" void  GetUIModuleValue (unsigned int offset, variant &value)\n Get Ui module IOMap value.", "GetInputModuleValue":" void  GetInputModuleValue (unsigned int offset, variant &value)\n Get Input module IOMap value.", "GetOutputModuleValue":" void  GetOutputModuleValue (unsigned int offset, variant &value)\n Get Output module IOMap value.", "GetLowSpeedModuleValue":" void  GetLowSpeedModuleValue (unsigned int offset, variant &value)\n Get LowSpeed module IOMap value.", "GetDisplayModuleValue":" void  GetDisplayModuleValue (unsigned int offset, variant &value)\n Get Display module IOMap value.", "GetCommModuleValue":" void  GetCommModuleValue (unsigned int offset, variant &value)\n Get Comm module IOMap value.", "PowerDown":" void  PowerDown ()\n Power down the NXT.", "SleepNow":" void  SleepNow ()\n Put the brick to sleep immediately.", "RebootInFirmwareMode":" void  RebootInFirmwareMode ()\n Reboot the NXT in firmware download mode.", "JoystickMessageRead":" char  JoystickMessageRead (byte queue, JoystickMessageType &msg)\n Read a joystick message from a queue/mailbox.", "JoystickExMessageRead":" char  JoystickExMessageRead (byte queue, JoystickExMessageType &msg)\n Read an extended joystick message from a queue/mailbox.", "SendMessage":" char  SendMessage (byte queue, string msg)\n Send a message to a queue/mailbox.", "ReceiveMessage":" char  ReceiveMessage (byte queue, bool clear, string &msg)\n Read a message from a queue/mailbox.", "BluetoothStatus":" char  BluetoothStatus (byte conn)\n Check bluetooth status.", "BluetoothWrite":" char  BluetoothWrite (byte conn, byte buffer[])\n Write to a bluetooth connection.", "RemoteConnectionWrite":" char  RemoteConnectionWrite (byte conn, byte buffer[])\n Write to a remote connection.", "RemoteConnectionIdle":" bool  RemoteConnectionIdle (byte conn)\n Check if remote connection is idle.", "SendRemoteBool":" char  SendRemoteBool (byte conn, byte queue, bool bval)\n Send a boolean value to a remote mailbox.", "SendRemoteNumber":" char  SendRemoteNumber (byte conn, byte queue, long val)\n Send a numeric value to a remote mailbox.", "SendRemoteString":" char  SendRemoteString (byte conn, byte queue, string str)\n Send a string value to a remote mailbox.", "SendResponseBool":" char  SendResponseBool (byte queue, bool bval)\n Write a boolean value to a local response mailbox.", "SendResponseNumber":" char  SendResponseNumber (byte queue, long val)\n Write a numeric value to a local response mailbox.", "SendResponseString":" char  SendResponseString (byte queue, string str)\n Write a string value to a local response mailbox.", "ReceiveRemoteBool":" char  ReceiveRemoteBool (byte queue, bool clear, bool &bval)\n Read a boolean value from a queue/mailbox.", "ReceiveRemoteMessageEx":" char  ReceiveRemoteMessageEx (byte queue, bool clear, string &str, long &val, bool &bval)\n Read a value from a queue/mailbox.", "ReceiveRemoteNumber":" char  ReceiveRemoteNumber (byte queue, bool clear, long &val)\n Read a numeric value from a queue/mailbox.", "ReceiveRemoteString":" char  ReceiveRemoteString (byte queue, bool clear, string &str)\n Read a string value from a queue/mailbox.", "RemoteKeepAlive":" char  RemoteKeepAlive (byte conn)\n Send a KeepAlive message.", "RemoteMessageRead":" char  RemoteMessageRead (byte conn, byte queue)\n Send a MessageRead message.", "RemoteMessageWrite":" char  RemoteMessageWrite (byte conn, byte queue, string msg)\n Send a MessageWrite message.", "RemotePlaySoundFile":" char  RemotePlaySoundFile (byte conn, string filename, bool bloop)\n Send a PlaySoundFile message.", "RemotePlayTone":" char  RemotePlayTone (byte conn, unsigned int frequency, unsigned int duration)\n Send a PlayTone message.", "RemoteResetMotorPosition":" char  RemoteResetMotorPosition (byte conn, byte port, bool brelative)\n Send a ResetMotorPosition message.", "RemoteResetScaledValue":" char  RemoteResetScaledValue (byte conn, byte port)\n Send a ResetScaledValue message.", "RemoteSetInputMode":" char  RemoteSetInputMode (byte conn, byte port, byte type, byte mode)\n Send a SetInputMode message.", "RemoteSetOutputState":" char  RemoteSetOutputState (byte conn, byte port, char speed, byte mode, byte regmode, char turnpct, byte runstate, unsigned long tacholimit)\n Send a SetOutputMode message.", "RemoteStartProgram":" char  RemoteStartProgram (byte conn, string filename)\n Send a StartProgram message.", "RemoteStopProgram":" char  RemoteStopProgram (byte conn)\n Send a StopProgram message.", "RemoteStopSound":" char  RemoteStopSound (byte conn)\n Send a StopSound message.", "RemoteGetOutputState":" char  RemoteGetOutputState (byte conn, OutputStateType &params)\n Send a GetOutputState message.", "RemoteGetInputValues":" char  RemoteGetInputValues (byte conn, InputValuesType &params)\n Send a GetInputValues message.", "RemoteGetBatteryLevel":" char  RemoteGetBatteryLevel (byte conn, int &value)\n Send a GetBatteryLevel message.", "RemoteLowspeedGetStatus":" char  RemoteLowspeedGetStatus (byte conn, byte &value)\n Send a LowspeedGetStatus message.", "RemoteLowspeedRead":" char  RemoteLowspeedRead (byte conn, byte port, byte &bread, byte &data[])\n Send a LowspeedRead message.", "RemoteGetCurrentProgramName":" char  RemoteGetCurrentProgramName (byte conn, string &name)\n Send a GetCurrentProgramName message.", "RemoteDatalogRead":" char  RemoteDatalogRead (byte conn, bool remove, byte &cnt, byte &log[])\n Send a DatalogRead message.", "RemoteGetContactCount":" char  RemoteGetContactCount (byte conn, byte &cnt)\n Send a GetContactCount message.", "RemoteGetContactName":" char  RemoteGetContactName (byte conn, byte idx, string &name)\n Send a GetContactName message.", "RemoteGetConnectionCount":" char  RemoteGetConnectionCount (byte conn, byte &cnt)\n Send a GetConnectionCount message.", "RemoteGetConnectionName":" char  RemoteGetConnectionName (byte conn, byte idx, string &name)\n Send a GetConnectionName message.", "RemoteGetProperty":" char  RemoteGetProperty (byte conn, byte property, variant &value)\n Send a GetProperty message.", "RemoteResetTachoCount":" char  RemoteResetTachoCount (byte conn, byte port)\n Send a ResetTachoCount message.", "RemoteDatalogSetTimes":" char  RemoteDatalogSetTimes (byte conn, long synctime)\n Send a DatalogSetTimes message.", "RemoteSetProperty":" char  RemoteSetProperty (byte conn, byte prop, variant value)\n Send a SetProperty message.", "RemoteLowspeedWrite":" char  RemoteLowspeedWrite (byte conn, byte port, byte txlen, byte rxlen, byte data[])\n Send a LowspeedWrite message.", "RemoteOpenRead":" char  RemoteOpenRead (byte conn, string filename, byte &handle, long &size)\n Send an OpenRead message.", "RemoteOpenAppendData":" char  RemoteOpenAppendData (byte conn, string filename, byte &handle, long &size)\n Send an OpenAppendData message.", "RemoteDeleteFile":" char  RemoteDeleteFile (byte conn, string filename)\n Send a DeleteFile message.", "RemoteFindFirstFile":" char  RemoteFindFirstFile (byte conn, string mask, byte &handle, string &name, long &size)\n Send a FindFirstFile message.", "RemoteGetFirmwareVersion":" char  RemoteGetFirmwareVersion (byte conn, byte &pmin, byte &pmaj, byte &fmin, byte &fmaj)\n Send a GetFirmwareVersion message.", "RemoteGetBluetoothAddress":" char  RemoteGetBluetoothAddress (byte conn, byte &btaddr[])\n Send a GetBluetoothAddress message.", "RemoteGetDeviceInfo":" char  RemoteGetDeviceInfo (byte conn, string &name, byte &btaddr[], byte &btsignal[], long &freemem)\n Send a GetDeviceInfo message.", "RemoteDeleteUserFlash":" char  RemoteDeleteUserFlash (byte conn)\n Send a DeleteUserFlash message.", "RemoteOpenWrite":" char  RemoteOpenWrite (byte conn, string filename, long size, byte &handle)\n Send an OpenWrite message.", "RemoteOpenWriteLinear":" char  RemoteOpenWriteLinear (byte conn, string filename, long size, byte &handle)\n Send an OpenWriteLinear message.", "RemoteOpenWriteData":" char  RemoteOpenWriteData (byte conn, string filename, long size, byte &handle)\n Send an OpenWriteData message.", "RemoteCloseFile":" char  RemoteCloseFile (byte conn, byte handle)\n Send a CloseFile message.", "RemoteFindNextFile":" char  RemoteFindNextFile (byte conn, byte &handle, string &name, long &size)\n Send a FindNextFile message.", "RemotePollCommandLength":" char  RemotePollCommandLength (byte conn, byte bufnum, byte &length)\n Send a PollCommandLength message.", "RemoteWrite":" char  RemoteWrite (byte conn, byte &handle, int &numbytes, byte data[])\n Send a Write message.", "RemoteRead":" char  RemoteRead (byte conn, byte &handle, int &numbytes, byte &data[])\n Send a Read message.", "RemoteIOMapRead":" char  RemoteIOMapRead (byte conn, long id, int offset, int &numbytes, byte &data[])\n Send an IOMapRead message.", "RemotePollCommand":" char  RemotePollCommand (byte conn, byte bufnum, byte &len, byte &data[])\n Send a PollCommand message.", "RemoteRenameFile":" char  RemoteRenameFile (byte conn, string oldname, string newname)\n Send a RenameFile message.", "RemoteBluetoothFactoryReset":" char  RemoteBluetoothFactoryReset (byte conn)\n Send a BluetoothFactoryReset message.", "RemoteIOMapWriteValue":" char  RemoteIOMapWriteValue (byte conn, long id, int offset, variant value)\n Send an IOMapWrite value message.", "RemoteIOMapWriteBytes":" char  RemoteIOMapWriteBytes (byte conn, long id, int offset, byte data[])\n Send an IOMapWrite bytes message.", "RemoteSetBrickName":" char  RemoteSetBrickName (byte conn, string name)\n Send a SetBrickName message.", "UseRS485":" void  UseRS485 (void)\n Use the RS485 port.", "RS485Control":" char  RS485Control (byte cmd, byte baud, unsigned int mode)\n Control the RS485 port.", "RS485DataAvailable":" byte  RS485DataAvailable (void)\n Check for RS485 available data.", "RS485Initialize":" char  RS485Initialize (void)\n Initialize RS485 port.", "RS485Disable":" char  RS485Disable (void)\n Disable RS485.", "RS485Enable":" char  RS485Enable (void)\n Enable RS485.", "RS485Read":" char  RS485Read (byte &buffer[])\n Read RS485 data.", "RS485ReadEx":" char  RS485ReadEx (byte &buffer[], byte buflen)\n Read limited RS485 data.", "RS485SendingData":" byte  RS485SendingData (void)\n Is RS485 sending data.", "RS485Status":" void  RS485Status (byte &sendingData, byte &dataAvail)\n Check RS485 status.", "RS485Uart":" char  RS485Uart (byte baud, unsigned int mode)\n Configure RS485 UART.", "RS485Write":" char  RS485Write (byte buffer[])\n Write RS485 data.", "SendRS485Bool":" char  SendRS485Bool (bool bval)\n Write RS485 boolean.", "SendRS485Number":" char  SendRS485Number (long val)\n Write RS485 numeric.", "SendRS485String":" char  SendRS485String (string str)\n Write RS485 string.", "GetBTInputBuffer":" void  GetBTInputBuffer (const byte offset, byte cnt, byte &data[])\n Get bluetooth input buffer data.", "GetBTOutputBuffer":" void  GetBTOutputBuffer (const byte offset, byte cnt, byte &data[])\n Get bluetooth output buffer data.", "GetHSInputBuffer":" void  GetHSInputBuffer (const byte offset, byte cnt, byte &data[])\n Get hi-speed port input buffer data.", "GetHSOutputBuffer":" void  GetHSOutputBuffer (const byte offset, byte cnt, byte &data[])\n Get hi-speed port output buffer data.", "GetUSBInputBuffer":" void  GetUSBInputBuffer (const byte offset, byte cnt, byte &data[])\n Get usb input buffer data.", "GetUSBOutputBuffer":" void  GetUSBOutputBuffer (const byte offset, byte cnt, byte &data[])\n Get usb output buffer data.", "GetUSBPollBuffer":" void  GetUSBPollBuffer (const byte offset, byte cnt, byte &data[])\n Get usb poll buffer data.", "BTDeviceName":" string  BTDeviceName (const byte devidx)\n Get bluetooth device name.", "BTConnectionName":" string  BTConnectionName (const byte conn)\n Get bluetooth device name.", "BTConnectionPinCode":" string  BTConnectionPinCode (const byte conn)\n Get bluetooth device pin code.", "BrickDataName":" string  BrickDataName (void)\n Get NXT name.", "GetBTDeviceAddress":" void  GetBTDeviceAddress (const byte devidx, byte &data[])\n Get bluetooth device address.", "GetBTConnectionAddress":" void  GetBTConnectionAddress (const byte conn, byte &data[])\n Get bluetooth device address.", "GetBrickDataAddress":" void  GetBrickDataAddress (byte &data[])\n Get NXT address.", "BTDeviceClass":" long  BTDeviceClass (const byte devidx)\n Get bluetooth device class.", "BTDeviceStatus":" byte  BTDeviceStatus (const byte devidx)\n Get bluetooth device status.", "BTConnectionClass":" long  BTConnectionClass (const byte conn)\n Get bluetooth device class.", "BTConnectionHandleNum":" byte  BTConnectionHandleNum (const byte conn)\n Get bluetooth device handle number.", "BTConnectionStreamStatus":" byte  BTConnectionStreamStatus (const byte conn)\n Get bluetooth device stream status.", "BTConnectionLinkQuality":" byte  BTConnectionLinkQuality (const byte conn)\n Get bluetooth device link quality.", "BrickDataBluecoreVersion":" int   BrickDataBluecoreVersion (void)\n Get NXT bluecore version.", "BrickDataBtStateStatus":" byte  BrickDataBtStateStatus (void)\n Get NXT bluetooth state status.", "BrickDataBtHardwareStatus":" byte  BrickDataBtHardwareStatus (void)\n Get NXT bluetooth hardware status.", "BrickDataTimeoutValue":" byte  BrickDataTimeoutValue (void)\n Get NXT bluetooth timeout value.", "BTInputBufferInPtr":" byte  BTInputBufferInPtr (void)\n Get bluetooth input buffer in-pointer.", "BTInputBufferOutPtr":" byte  BTInputBufferOutPtr (void)\n Get bluetooth input buffer out-pointer.", "BTOutputBufferInPtr":" byte  BTOutputBufferInPtr (void)\n Get bluetooth output buffer in-pointer.", "BTOutputBufferOutPtr":" byte  BTOutputBufferOutPtr (void)\n Get bluetooth output buffer out-pointer.", "HSInputBufferInPtr":" byte  HSInputBufferInPtr (void)\n Get hi-speed port input buffer in-pointer.", "HSInputBufferOutPtr":" byte  HSInputBufferOutPtr (void)\n Get hi-speed port input buffer out-pointer.", "HSOutputBufferInPtr":" byte  HSOutputBufferInPtr (void)\n Get hi-speed port output buffer in-pointer.", "HSOutputBufferOutPtr":" byte  HSOutputBufferOutPtr (void)\n Get hi-speed port output buffer out-pointer.", "USBInputBufferInPtr":" byte  USBInputBufferInPtr (void)\n Get usb port input buffer in-pointer.", "USBInputBufferOutPtr":" byte  USBInputBufferOutPtr (void)\n Get usb port input buffer out-pointer.", "USBOutputBufferInPtr":" byte  USBOutputBufferInPtr (void)\n Get usb port output buffer in-pointer.", "USBOutputBufferOutPtr":" byte  USBOutputBufferOutPtr (void)\n Get usb port output buffer out-pointer.", "USBPollBufferInPtr":" byte  USBPollBufferInPtr (void)\n Get usb port poll buffer in-pointer.", "USBPollBufferOutPtr":" byte  USBPollBufferOutPtr (void)\n Get usb port poll buffer out-pointer.", "BTDeviceCount":" byte  BTDeviceCount (void)\n Get bluetooth device count.", "BTDeviceNameCount":" byte  BTDeviceNameCount (void)\n Get bluetooth device name count.", "HSFlags":" byte  HSFlags (void)\n Get hi-speed port flags.", "HSSpeed":" byte  HSSpeed (void)\n Get hi-speed port speed.", "HSState":" byte  HSState (void)\n Get hi-speed port state.", "HSAddress":" byte  HSAddress (void)\n Get hi-speed port address.", "HSMode":" int   HSMode (void)\n Get hi-speed port mode.", "BTDataMode":" int   BTDataMode (void)\n Get Bluetooth data mode.", "HSDataMode":" int   HSDataMode (void)\n Get hi-speed port datamode.", "USBState":" byte  USBState (void)\n Get USB state.", "SetBTInputBuffer":" void  SetBTInputBuffer (const byte offset, byte cnt, byte data[])\n Set bluetooth input buffer data.", "SetBTInputBufferInPtr":" void  SetBTInputBufferInPtr (byte n)\n Set bluetooth input buffer in-pointer.", "SetBTInputBufferOutPtr":" void  SetBTInputBufferOutPtr (byte n)\n Set bluetooth input buffer out-pointer.", "SetBTOutputBuffer":" void  SetBTOutputBuffer (const byte offset, byte cnt, byte data[])\n Set bluetooth output buffer data.", "SetBTOutputBufferInPtr":" void  SetBTOutputBufferInPtr (byte n)\n Set bluetooth output buffer in-pointer.", "SetBTOutputBufferOutPtr":" void  SetBTOutputBufferOutPtr (byte n)\n Set bluetooth output buffer out-pointer.", "SetHSInputBuffer":" void  SetHSInputBuffer (const byte offset, byte cnt, byte data[])\n Set hi-speed port input buffer data.", "SetHSInputBufferInPtr":" void  SetHSInputBufferInPtr (byte n)\n Set hi-speed port input buffer in-pointer.", "SetHSInputBufferOutPtr":" void  SetHSInputBufferOutPtr (byte n)\n Set hi-speed port input buffer out-pointer.", "SetHSOutputBuffer":" void  SetHSOutputBuffer (const byte offset, byte cnt, byte data[])\n Set hi-speed port output buffer data.", "SetHSOutputBufferInPtr":" void  SetHSOutputBufferInPtr (byte n)\n Set hi-speed port output buffer in-pointer.", "SetHSOutputBufferOutPtr":" void  SetHSOutputBufferOutPtr (byte n)\n Set hi-speed port output buffer out-pointer.", "SetUSBInputBuffer":" void  SetUSBInputBuffer (const byte offset, byte cnt, byte data[])\n Set USB input buffer data.", "SetUSBInputBufferInPtr":" void  SetUSBInputBufferInPtr (byte n)\n Set USB input buffer in-pointer.", "SetUSBInputBufferOutPtr":" void  SetUSBInputBufferOutPtr (byte n)\n Set USB input buffer out-pointer.", "SetUSBOutputBuffer":" void  SetUSBOutputBuffer (const byte offset, byte cnt, byte data[])\n Set USB output buffer data.", "SetUSBOutputBufferInPtr":" void  SetUSBOutputBufferInPtr (byte n)\n Set USB output buffer in-pointer.", "SetUSBOutputBufferOutPtr":" void  SetUSBOutputBufferOutPtr (byte n)\n Set USB output buffer out-pointer.", "SetUSBPollBuffer":" void  SetUSBPollBuffer (const byte offset, byte cnt, byte data[])\n Set USB poll buffer data.", "SetUSBPollBufferInPtr":" void  SetUSBPollBufferInPtr (byte n)\n Set USB poll buffer in-pointer.", "SetUSBPollBufferOutPtr":" void  SetUSBPollBufferOutPtr (byte n)\n Set USB poll buffer out-pointer.", "SetHSFlags":" void  SetHSFlags (byte hsFlags)\n Set hi-speed port flags.", "SetHSSpeed":" void  SetHSSpeed (byte hsSpeed)\n Set hi-speed port speed.", "SetHSState":" void  SetHSState (byte hsState)\n Set hi-speed port state.", "SetHSAddress":" void  SetHSAddress (byte hsAddress)\n Set hi-speed port address.", "SetHSMode":" void  SetHSMode (unsigned int hsMode)\n Set hi-speed port mode.", "SetBTDataMode":" void  SetBTDataMode (const byte dataMode)\n Set Bluetooth data mode.", "SetHSDataMode":" void  SetHSDataMode (const byte dataMode)\n Set hi-speed port data mode.", "SetUSBState":" void  SetUSBState (byte usbState)\n Set USB state.", "SysMessageWrite":" void  SysMessageWrite (MessageWriteType &args)\n Write message.", "SysMessageRead":" void  SysMessageRead (MessageReadType &args)\n Read message.", "SysCommBTWrite":" void  SysCommBTWrite (CommBTWriteType &args)\n Write data to a Bluetooth connection.", "SysCommBTCheckStatus":" void  SysCommBTCheckStatus (CommBTCheckStatusType &args)\n Check Bluetooth connection status.", "SysCommExecuteFunction":" void  SysCommExecuteFunction (CommExecuteFunctionType &args)\n Execute any Comm module command.", "SysCommHSControl":" void  SysCommHSControl (CommHSControlType &args)\n Control the hi-speed port.", "SysCommHSCheckStatus":" void  SysCommHSCheckStatus (CommHSCheckStatusType &args)\n Check the hi-speed port status.", "SysCommHSRead":" void  SysCommHSRead (CommHSReadWriteType &args)\n Read from the hi-speed port.", "SysCommHSWrite":" void  SysCommHSWrite (CommHSReadWriteType &args)\n Write to the hi-speed port.", "SysCommBTOnOff":" void  SysCommBTOnOff (CommBTOnOffType &args)\n Turn on or off the bluetooth subsystem.", "SysCommBTConnection":" void  SysCommBTConnection (CommBTConnectionType &args)\n Connect or disconnect a bluetooth device.", "ButtonPressed":" bool  ButtonPressed (const byte btn, bool resetCount=false)\n Check for button press.", "ButtonCount":" byte  ButtonCount (const byte btn, bool resetCount=false)\n Get button press count.", "ReadButtonEx":" char  ReadButtonEx (const byte btn, bool reset, bool &pressed, unsigned int &count)\n Read button information.", "ButtonPressCount":" byte  ButtonPressCount (const byte btn)\n Get button press count.", "ButtonLongPressCount":" byte  ButtonLongPressCount (const byte btn)\n Get button long press count.", "ButtonShortReleaseCount":" byte  ButtonShortReleaseCount (const byte btn)\n Get button short release count.", "ButtonLongReleaseCount":" byte  ButtonLongReleaseCount (const byte btn)\n Get button long release count.", "ButtonReleaseCount":" byte  ButtonReleaseCount (const byte btn)\n Get button release count.", "ButtonState":" byte  ButtonState (const byte btn)\n Get button state.", "SetButtonLongPressCount":" void  SetButtonLongPressCount (const byte btn, const byte n)\n Set button long press count.", "SetButtonLongReleaseCount":" void  SetButtonLongReleaseCount (const byte btn, const byte n)\n Set button long release count.", "SetButtonPressCount":" void  SetButtonPressCount (const byte btn, const byte n)\n Set button press count.", "SetButtonReleaseCount":" void  SetButtonReleaseCount (const byte btn, const byte n)\n Set button release count.", "SetButtonShortReleaseCount":" void  SetButtonShortReleaseCount (const byte btn, const byte n)\n Set button short release count.", "SetButtonState":" void  SetButtonState (const byte btn, const byte state)\n Set button state.", "SysReadButton":" void  SysReadButton (ReadButtonType &args)\n Read button.", "CommandFlags":" byte  CommandFlags (void)\n Get command flags.", "UIState":" byte  UIState (void)\n Get UI module state.", "UIButton":" byte  UIButton (void)\n Read UI button.", "VMRunState":" byte  VMRunState (void)\n Read VM run state.", "BatteryState":" byte  BatteryState (void)\n Get battery state.", "BluetoothState":" byte  BluetoothState (void)\n Get bluetooth state.", "UsbState":" byte  UsbState (void)\n Get UI module USB state.", "SleepTimeout":" byte  SleepTimeout (void)\n Read sleep timeout.", "SleepTime":" byte  SleepTime (void)\n Read sleep time.", "SleepTimer":" byte  SleepTimer (void)\n Read sleep timer.", "RechargeableBattery":" bool  RechargeableBattery (void)\n Read battery type.", "Volume":" byte  Volume (void)\n Read volume.", "OnBrickProgramPointer":" byte  OnBrickProgramPointer (void)\n Read the on brick program pointer value.", "AbortFlag":" byte  AbortFlag (void)\n Read abort flag.", "LongAbort":" byte  LongAbort (void)\n Read long abort setting.", "BatteryLevel":" unsigned int  BatteryLevel (void)\n Get battery Level.", "SetCommandFlags":" void  SetCommandFlags (const byte cmdFlags)\n Set command flags.", "SetUIButton":" void  SetUIButton (byte btn)\n Set UI button.", "SetUIState":" void  SetUIState (byte state)\n Set UI state.", "SetVMRunState":" void  SetVMRunState (const byte vmRunState)\n Set VM run state.", "SetBatteryState":" void  SetBatteryState (byte state)\n Set battery state.", "SetBluetoothState":" void  SetBluetoothState (byte state)\n Set bluetooth state.", "SetSleepTimeout":" void  SetSleepTimeout (const byte n)\n Set sleep timeout.", "SetSleepTime":" void  SetSleepTime (const byte n)\n Set sleep time.", "SetSleepTimer":" void  SetSleepTimer (const byte n)\n Set the sleep timer.", "SetVolume":" void  SetVolume (byte volume)\n Set volume.", "SetOnBrickProgramPointer":" void  SetOnBrickProgramPointer (byte obpStep)\n Set on-brick program pointer.", "ForceOff":" void  ForceOff (byte num)\n Turn off NXT.", "SetAbortFlag":" void  SetAbortFlag (byte abortFlag)\n Set abort flag.", "SetLongAbort":" void  SetLongAbort (bool longAbort)\n Set long abort.", "SysSetSleepTimeout":" void  SysSetSleepTimeout (SetSleepTimeoutType &args)\n Set system sleep timeout.", "FreeMemory":" unsigned int  FreeMemory (void)\n Get free flash memory.", "CreateFile":" unsigned int  CreateFile (string fname, unsigned int fsize, byte &handle)\n Create a file.", "OpenFileAppend":" unsigned int  OpenFileAppend (string fname, unsigned int &fsize, byte &handle)\n Open a file for appending.", "OpenFileRead":" unsigned int  OpenFileRead (string fname, unsigned int &fsize, byte &handle)\n Open a file for reading.", "CloseFile":" unsigned int  CloseFile (byte handle)\n Close a file.", "ResolveHandle":" unsigned int  ResolveHandle (string filename, byte &handle, bool &writable)\n Resolve a handle.", "RenameFile":" unsigned int  RenameFile (string oldname, string newname)\n Rename a file.", "DeleteFile":" unsigned int  DeleteFile (string fname)\n Delete a file.", "ResizeFile":" unsigned int  ResizeFile (string fname, const unsigned int newsize)\n Resize a file.", "CreateFileLinear":" unsigned int  CreateFileLinear (string fname, unsigned int fsize, byte &handle)\n Create a linear file.", "CreateFileNonLinear":" unsigned int  CreateFileNonLinear (string fname, unsigned int fsize, byte &handle)\n Create a non-linear file.", "OpenFileReadLinear":" unsigned int  OpenFileReadLinear (string fname, unsigned int &fsize, byte &handle)\n Open a linear file for reading.", "FindFirstFile":" unsigned int  FindFirstFile (string &fname, byte &handle)\n Start searching for files.", "FindNextFile":" unsigned int  FindNextFile (string &fname, byte &handle)\n Continue searching for files.", "SizeOf":" unsigned int  SizeOf (variant &value)\n Calculate the size of a variable.", "TypeOf":" unsigned int  TypeOf (variant &value)\n Return the type of a variable.", "Read":" unsigned int  Read (byte handle, variant &value)\n Read a value from a file.", "ReadLn":" unsigned int  ReadLn (byte handle, variant &value)\n Read a value from a file plus line ending.", "ReadBytes":" unsigned int  ReadBytes (byte handle, unsigned int &length, byte &buf[])\n Read bytes from a file.", "ReadLnString":" unsigned int  ReadLnString (byte handle, string &output)\n Read a string from a file plus line ending.", "Write":" unsigned int  Write (byte handle, const variant &value)\n Write value to file.", "WriteBytes":" unsigned int  WriteBytes (byte handle, const byte &buf[], unsigned int &cnt)\n Write bytes to file.", "WriteBytesEx":" unsigned int  WriteBytesEx (byte handle, unsigned int &len, const byte &buf[])\n Write bytes to a file with limit.", "WriteLn":" unsigned int  WriteLn (byte handle, const variant &value)\n Write a value and new line to a file.", "WriteLnString":" unsigned int  WriteLnString (byte handle, const string &str, unsigned int &cnt)\n Write string and new line to a file.", "WriteString":" unsigned int  WriteString (byte handle, const string &str, unsigned int &cnt)\n Write string to a file.", "SysFileOpenRead":" void  SysFileOpenRead (FileOpenType &args)\n Open file for reading.", "SysFileOpenWrite":" void  SysFileOpenWrite (FileOpenType &args)\n Open and create file for writing.", "SysFileOpenAppend":" void  SysFileOpenAppend (FileOpenType &args)\n Open file for writing at end of file.", "SysFileRead":" void  SysFileRead (FileReadWriteType &args)\n Read from file.", "SysFileWrite":" void  SysFileWrite (FileReadWriteType &args)\n File write.", "SysFileClose":" void  SysFileClose (FileCloseType &args)\n Close file handle.", "SysFileResolveHandle":" void  SysFileResolveHandle (FileResolveHandleType &args)\n File resolve handle.", "SysFileRename":" void  SysFileRename (FileRenameType &args)\n Rename file.", "SysFileDelete":" void  SysFileDelete (FileDeleteType &args)\n Delete file.", "SysLoaderExecuteFunction":" void  SysLoaderExecuteFunction (LoaderExecuteFunctionType &args)\n Execute any Loader module command.", "SysFileFindFirst":" void  SysFileFindFirst (FileFindType &args)\n Start finding files.", "SysFileFindNext":" void  SysFileFindNext (FileFindType &args)\n Continue finding files.", "SysFileOpenWriteLinear":" void  SysFileOpenWriteLinear (FileOpenType &args)\n Open and create linear file for writing.", "SysFileOpenWriteNonLinear":" void  SysFileOpenWriteNonLinear (FileOpenType &args)\n Open and create non-linear file for writing.", "SysFileOpenReadLinear":" void  SysFileOpenReadLinear (FileOpenType &args)\n Open linear file for reading.", "SysFileSeek":" void  SysFileSeek (FileSeekType &args)\n Seek to file position.", "SysFileResize":" void  SysFileResize (FileResizeType &args)\n Resize a file.", "SysFileTell":" void  SysFileTell (FileTellType &args)\n Return the file position.", "SysListFiles":" void  SysListFiles (ListFilesType &args)\n List files.", "SetSensorHTGyro":" void  SetSensorHTGyro (const byte &port)\n Set sensor as HiTechnic Gyro.", "SetSensorHTMagnet":" void  SetSensorHTMagnet (const byte &port)\n Set sensor as HiTechnic Magnet.", "SetSensorHTEOPD":" void  SetSensorHTEOPD (const byte &port, bool bStandard=true)\n Set sensor as HiTechnic EOPD.", "SetSensorHTForce":" void  SetSensorHTForce (const byte &port)\n Set sensor as HiTechnic Force.", "SensorHTGyro":" int   SensorHTGyro (const byte &port, int offset=0)\n Read HiTechnic Gyro sensor.", "SensorHTMagnet":" int   SensorHTMagnet (const byte &port, int offset=0)\n Read HiTechnic Magnet sensor.", "SensorHTEOPD":" int   SensorHTEOPD (const byte &port)\n Read HiTechnic EOPD sensor.", "SensorHTForce":" int   SensorHTForce (const byte &port)\n Read HiTechnic Force sensor.", "SensorHTColorNum":" int   SensorHTColorNum (const byte &port)\n Read HiTechnic color sensor color number.", "SensorHTCompass":" int   SensorHTCompass (const byte &port)\n Read HiTechnic compass.", "SensorHTIRSeekerDir":" int   SensorHTIRSeekerDir (const byte &port)\n Read HiTechnic IRSeeker direction.", "SensorHTIRSeeker2Addr":" int   SensorHTIRSeeker2Addr (const byte &port, const byte reg)\n Read HiTechnic IRSeeker2 register.", "SensorHTIRSeeker2DCDir":" int   SensorHTIRSeeker2DCDir (const byte &port)\n Read HiTechnic IRSeeker2 DC direction.", "SensorHTIRSeeker2ACDir":" int   SensorHTIRSeeker2ACDir (const byte &port)\n Read HiTechnic IRSeeker2 AC direction.", "SetHTColor2Mode":" char  SetHTColor2Mode (const byte &port, byte mode)\n Set HiTechnic Color2 mode.", "SetHTIRSeeker2Mode":" char  SetHTIRSeeker2Mode (const byte &port, const byte mode)\n Set HiTechnic IRSeeker2 mode.", "ReadSensorHTAccel":" bool  ReadSensorHTAccel (const byte port, int &x, int &y, int &z)\n Read HiTechnic acceleration values.", "ReadSensorHTColor":" bool  ReadSensorHTColor (const byte port, byte &ColorNum, byte &Red, byte &Green, byte &Blue)\n Read HiTechnic Color values.", "ReadSensorHTIRSeeker":" bool  ReadSensorHTIRSeeker (const byte port, byte &dir, byte &s1, byte &s3, byte &s5, byte &s7, byte &s9)\n Read HiTechnic IRSeeker values.", "ReadSensorHTNormalizedColor":" bool  ReadSensorHTNormalizedColor (const byte port, byte &ColorIdx, byte &Red, byte &Green, byte &Blue)\n Read HiTechnic Color normalized values.", "ReadSensorHTRawColor":" bool  ReadSensorHTRawColor (const byte port, unsigned int &Red, unsigned int &Green, unsigned int &Blue)\n Read HiTechnic Color raw values.", "ReadSensorHTColor2Active":" bool  ReadSensorHTColor2Active (byte port, byte &ColorNum, byte &Red, byte &Green, byte &Blue, byte &White)\n Read HiTechnic Color2 active values.", "ReadSensorHTNormalizedColor2Active":" bool  ReadSensorHTNormalizedColor2Active (const byte port, byte &ColorIdx, byte &Red, byte &Green, byte &Blue)\n Read HiTechnic Color2 normalized active values.", "ReadSensorHTRawColor2":" bool  ReadSensorHTRawColor2 (const byte port, unsigned int &Red, unsigned int &Green, unsigned int &Blue, unsigned int &White)\n Read HiTechnic Color2 raw values.", "ReadSensorHTIRReceiver":" bool  ReadSensorHTIRReceiver (const byte port, char &pfdata[])\n Read HiTechnic IRReceiver Power Function bytes.", "ReadSensorHTIRReceiverEx":" bool  ReadSensorHTIRReceiverEx (const byte port, const byte offset, char &pfchar)\n Read HiTechnic IRReceiver Power Function value.", "ReadSensorHTIRSeeker2AC":" bool  ReadSensorHTIRSeeker2AC (const byte port, byte &dir, byte &s1, byte &s3, byte &s5, byte &s7, byte &s9)\n Read HiTechnic IRSeeker2 AC values.", "ReadSensorHTIRSeeker2DC":" bool  ReadSensorHTIRSeeker2DC (const byte port, byte &dir, byte &s1, byte &s3, byte &s5, byte &s7, byte &s9, byte &avg)\n Read HiTechnic IRSeeker2 DC values.", "ResetSensorHTAngle":" char  ResetSensorHTAngle (const byte port, const byte mode)\n Reset HiTechnic Angle sensor.", "ReadSensorHTAngle":" bool  ReadSensorHTAngle (const byte port, int &Angle, long &AccAngle, int &RPM)\n Read HiTechnic Angle sensor values.", "ResetHTBarometricCalibration":" bool  ResetHTBarometricCalibration (byte port)\n Reset HiTechnic Barometric sensor calibration.", "SetHTBarometricCalibration":" bool  SetHTBarometricCalibration (byte port, unsigned int cal)\n Set HiTechnic Barometric sensor calibration.", "ReadSensorHTBarometric":" bool  ReadSensorHTBarometric (const byte port, int &temp, unsigned int &press)\n Read HiTechnic Barometric sensor values.", "SensorHTProtoAnalog":" int   SensorHTProtoAnalog (const byte port, const byte input)\n Read HiTechnic Prototype board analog input value.", "ReadSensorHTProtoAllAnalog":" bool  ReadSensorHTProtoAllAnalog (const byte port, int &a0, int &a1, int &a2, int &a3, int &a4)\n Read all HiTechnic Prototype board analog input values.", "SetSensorHTProtoDigitalControl":" bool  SetSensorHTProtoDigitalControl (const byte port, byte value)\n Control HiTechnic Prototype board digital pin direction.", "SensorHTProtoDigitalControl":" byte  SensorHTProtoDigitalControl (const byte port)\n Read HiTechnic Prototype board digital control values.", "SetSensorHTProtoDigital":" bool  SetSensorHTProtoDigital (const byte port, byte value)\n Set HiTechnic Prototype board digital output values.", "SensorHTProtoDigital":" byte  SensorHTProtoDigital (const byte port)\n Read HiTechnic Prototype board digital input values.", "SensorHTSuperProAnalog":" int   SensorHTSuperProAnalog (const byte port, const byte input)\n Read HiTechnic SuperPro board analog input value.", "ReadSensorHTSuperProAllAnalog":" bool  ReadSensorHTSuperProAllAnalog (const byte port, int &a0, int &a1, int &a2, int &a3)\n Read all HiTechnic SuperPro board analog input values.", "SetSensorHTSuperProDigitalControl":" bool  SetSensorHTSuperProDigitalControl (const byte port, byte value)\n Control HiTechnic SuperPro board digital pin direction.", "SensorHTSuperProDigitalControl":" byte  SensorHTSuperProDigitalControl (const byte port)\n Read HiTechnic SuperPro board digital control values.", "SetSensorHTSuperProDigital":" bool  SetSensorHTSuperProDigital (const byte port, byte value)\n Set HiTechnic SuperPro board digital output values.", "SensorHTSuperProDigital":" byte  SensorHTSuperProDigital (const byte port)\n Read HiTechnic SuperPro board digital input values.", "SetSensorHTSuperProLED":" bool  SetSensorHTSuperProLED (const byte port, byte value)\n Set HiTechnic SuperPro LED value.", "SensorHTSuperProLED":" byte  SensorHTSuperProLED (const byte port)\n Read HiTechnic SuperPro LED value.", "SetSensorHTSuperProStrobe":" bool  SetSensorHTSuperProStrobe (const byte port, byte value)\n Set HiTechnic SuperPro strobe value.", "SensorHTSuperProStrobe":" byte  SensorHTSuperProStrobe (const byte port)\n Read HiTechnic SuperPro strobe value.", "SetSensorHTSuperProProgramControl":" bool  SetSensorHTSuperProProgramControl (const byte port, byte value)\n Set HiTechnic SuperPro program control value.", "SensorHTSuperProProgramControl":" byte  SensorHTSuperProProgramControl (const byte port)\n Read HiTechnic SuperPro program control value.", "SetSensorHTSuperProAnalogOut":" bool  SetSensorHTSuperProAnalogOut (const byte port, const byte dac, byte mode, int freq, int volt)\n Set HiTechnic SuperPro board analog output parameters.", "ReadSensorHTSuperProAnalogOut":" bool  ReadSensorHTSuperProAnalogOut (const byte port, const byte dac, byte &mode, int &freq, int &volt)\n Read HiTechnic SuperPro board analog output parameters.", "SetSensorHTPIRDeadband":" bool  SetSensorHTPIRDeadband (const byte port, byte value)\n Set HiTechnic PIR deadband value.", "SensorHTPIR":" char  SensorHTPIR (const byte port)\n Read HiTechnic PIR measurement value.", "ReadSensorHTTouchMultiplexer":" void  ReadSensorHTTouchMultiplexer (const byte port, byte &t1, byte &t2, byte &t3, byte &t4)\n Read HiTechnic touch multiplexer.", "HTIRTrain":" char  HTIRTrain (const byte port, const byte channel, const byte func)\n HTIRTrain function.", "HTPFComboDirect":" char  HTPFComboDirect (const byte port, const byte channel, const byte outa, const byte outb)\n HTPFComboDirect function.", "HTPFComboPWM":" char  HTPFComboPWM (const byte port, const byte channel, const byte outa, const byte outb)\n HTPFComboPWM function.", "HTPFRawOutput":" char  HTPFRawOutput (const byte port, const byte nibble0, const byte nibble1, const byte nibble2)\n HTPFRawOutput function.", "HTPFRepeat":" char  HTPFRepeat (const byte port, const byte count, const unsigned int delay)\n HTPFRepeat function.", "HTPFSingleOutputCST":" char  HTPFSingleOutputCST (const byte port, const byte channel, const byte out, const byte func)\n HTPFSingleOutputCST function.", "HTPFSingleOutputPWM":" char  HTPFSingleOutputPWM (const byte port, const byte channel, const byte out, const byte func)\n HTPFSingleOutputPWM function.", "HTPFSinglePin":" char  HTPFSinglePin (const byte port, const byte channel, const byte out, const byte pin, const byte func, bool cont)\n HTPFSinglePin function.", "HTPFTrain":" char  HTPFTrain (const byte port, const byte channel, const byte func)\n HTPFTrain function.", "HTRCXSetIRLinkPort":" void  HTRCXSetIRLinkPort (const byte port)\n HTRCXSetIRLinkPort function.", "HTRCXBatteryLevel":" int   HTRCXBatteryLevel (void)\n HTRCXBatteryLevel function.", "HTRCXPoll":" int   HTRCXPoll (const byte src, const byte value)\n HTRCXPoll function Send the Poll command to an RCX to read a signed 2-byte value at the specified source and value combination.", "HTRCXPollMemory":" int   HTRCXPollMemory (const unsigned int address)\n HTRCXPollMemory function.", "HTRCXAddToDatalog":" void  HTRCXAddToDatalog (const byte src, const unsigned int value)\n HTRCXAddToDatalog function.", "HTRCXClearAllEvents":" void  HTRCXClearAllEvents (void)\n HTRCXClearAllEvents function.", "HTRCXClearCounter":" void  HTRCXClearCounter (const byte counter)\n HTRCXClearCounter function.", "HTRCXClearMsg":" void  HTRCXClearMsg (void)\n HTRCXClearMsg function.", "HTRCXClearSensor":" void  HTRCXClearSensor (const byte port)\n HTRCXClearSensor function.", "HTRCXClearSound":" void  HTRCXClearSound (void)\n HTRCXClearSound function.", "HTRCXClearTimer":" void  HTRCXClearTimer (const byte timer)\n HTRCXClearTimer function.", "HTRCXCreateDatalog":" void  HTRCXCreateDatalog (const unsigned int size)\n HTRCXCreateDatalog function.", "HTRCXDecCounter":" void  HTRCXDecCounter (const byte counter)\n HTRCXDecCounter function.", "HTRCXDeleteSub":" void  HTRCXDeleteSub (const byte s)\n HTRCXDeleteSub function.", "HTRCXDeleteSubs":" void  HTRCXDeleteSubs (void)\n HTRCXDeleteSubs function.", "HTRCXDeleteTask":" void  HTRCXDeleteTask (const byte t)\n HTRCXDeleteTask function.", "HTRCXDeleteTasks":" void  HTRCXDeleteTasks (void)\n HTRCXDeleteTasks function.", "HTRCXDisableOutput":" void  HTRCXDisableOutput (const byte outputs)\n HTRCXDisableOutput function.", "HTRCXEnableOutput":" void  HTRCXEnableOutput (const byte outputs)\n HTRCXEnableOutput function.", "HTRCXEvent":" void  HTRCXEvent (const byte src, const unsigned int value)\n HTRCXEvent function.", "HTRCXFloat":" void  HTRCXFloat (const byte outputs)\n HTRCXFloat function.", "HTRCXFwd":" void  HTRCXFwd (const byte outputs)\n HTRCXFwd function.", "HTRCXIncCounter":" void  HTRCXIncCounter (const byte counter)\n HTRCXIncCounter function.", "HTRCXInvertOutput":" void  HTRCXInvertOutput (const byte outputs)\n HTRCXInvertOutput function.", "HTRCXMuteSound":" void  HTRCXMuteSound (void)\n HTRCXMuteSound function.", "HTRCXObvertOutput":" void  HTRCXObvertOutput (const byte outputs)\n HTRCXObvertOutput function.", "HTRCXOff":" void  HTRCXOff (const byte outputs)\n HTRCXOff function.", "HTRCXOn":" void  HTRCXOn (const byte outputs)\n HTRCXOn function.", "HTRCXOnFor":" void  HTRCXOnFor (const byte outputs, const unsigned int ms)\n HTRCXOnFor function.", "HTRCXOnFwd":" void  HTRCXOnFwd (const byte outputs)\n HTRCXOnFwd function.", "HTRCXOnRev":" void  HTRCXOnRev (const byte outputs)\n HTRCXOnRev function.", "HTRCXPBTurnOff":" void  HTRCXPBTurnOff (void)\n HTRCXPBTurnOff function.", "HTRCXPing":" void  HTRCXPing (void)\n HTRCXPing function.", "HTRCXPlaySound":" void  HTRCXPlaySound (const byte snd)\n HTRCXPlaySound function.", "HTRCXPlayTone":" void  HTRCXPlayTone (const unsigned int freq, const byte duration)\n HTRCXPlayTone function.", "HTRCXPlayToneVar":" void  HTRCXPlayToneVar (const byte varnum, const byte duration)\n HTRCXPlayToneVar function.", "HTRCXRemote":" void  HTRCXRemote (unsigned int cmd)\n HTRCXRemote function.", "HTRCXRev":" void  HTRCXRev (const byte outputs)\n HTRCXRev function.", "HTRCXSelectDisplay":" void  HTRCXSelectDisplay (const byte src, const unsigned int value)\n HTRCXSelectDisplay function.", "HTRCXSelectProgram":" void  HTRCXSelectProgram (const byte prog)\n HTRCXSelectProgram function.", "HTRCXSendSerial":" void  HTRCXSendSerial (const byte first, const byte count)\n HTRCXSendSerial function.", "HTRCXSetDirection":" void  HTRCXSetDirection (const byte outputs, const byte dir)\n HTRCXSetDirection function.", "HTRCXSetEvent":" void  HTRCXSetEvent (const byte evt, const byte src, const byte type)\n HTRCXSetEvent function.", "HTRCXSetGlobalDirection":" void  HTRCXSetGlobalDirection (const byte outputs, const byte dir)\n HTRCXSetGlobalDirection function.", "HTRCXSetGlobalOutput":" void  HTRCXSetGlobalOutput (const byte outputs, const byte mode)\n HTRCXSetGlobalOutput function.", "HTRCXSetMaxPower":" void  HTRCXSetMaxPower (const byte outputs, const byte pwrsrc, const byte pwrval)\n HTRCXSetMaxPower function.", "HTRCXSetMessage":" void  HTRCXSetMessage (const byte msg)\n HTRCXSetMessage function.", "HTRCXSetOutput":" void  HTRCXSetOutput (const byte outputs, const byte mode)\n HTRCXSetOutput function.", "HTRCXSetPower":" void  HTRCXSetPower (const byte outputs, const byte pwrsrc, const byte pwrval)\n HTRCXSetPower function.", "HTRCXSetPriority":" void  HTRCXSetPriority (const byte p)\n HTRCXSetPriority function.", "HTRCXSetSensorMode":" void  HTRCXSetSensorMode (const byte port, const byte mode)\n HTRCXSetSensorMode function.", "HTRCXSetSensorType":" void  HTRCXSetSensorType (const byte port, const byte type)\n HTRCXSetSensorType function.", "HTRCXSetSleepTime":" void  HTRCXSetSleepTime (const byte t)\n HTRCXSetSleepTime function.", "HTRCXSetTxPower":" void  HTRCXSetTxPower (const byte pwr)\n HTRCXSetTxPower function.", "HTRCXSetWatch":" void  HTRCXSetWatch (const byte hours, const byte minutes)\n HTRCXSetWatch function.", "HTRCXStartTask":" void  HTRCXStartTask (const byte t)\n HTRCXStartTask function.", "HTRCXStopAllTasks":" void  HTRCXStopAllTasks (void)\n HTRCXStopAllTasks function.", "HTRCXStopTask":" void  HTRCXStopTask (const byte t)\n HTRCXStopTask function.", "HTRCXToggle":" void  HTRCXToggle (const byte outputs)\n HTRCXToggle function.", "HTRCXUnmuteSound":" void  HTRCXUnmuteSound (void)\n HTRCXUnmuteSound function.", "HTScoutCalibrateSensor":" void  HTScoutCalibrateSensor (void)\n HTScoutCalibrateSensor function.", "HTScoutMuteSound":" void  HTScoutMuteSound (void)\n HTScoutMuteSound function.", "HTScoutSelectSounds":" void  HTScoutSelectSounds (const byte grp)\n HTScoutSelectSounds function.", "HTScoutSendVLL":" void  HTScoutSendVLL (const byte src, const unsigned int value)\n HTScoutSendVLL function.", "HTScoutSetEventFeedback":" void  HTScoutSetEventFeedback (const byte src, const unsigned int value)\n HTScoutSetEventFeedback function.", "HTScoutSetLight":" void  HTScoutSetLight (const byte x)\n HTScoutSetLight function.", "HTScoutSetScoutMode":" void  HTScoutSetScoutMode (const byte mode)\n HTScoutSetScoutMode function.", "HTScoutSetSensorClickTime":" void  HTScoutSetSensorClickTime (const byte src, const unsigned int value)\n HTScoutSetSensorClickTime function.", "HTScoutSetSensorHysteresis":" void  HTScoutSetSensorHysteresis (const byte src, const unsigned int value)\n HTScoutSetSensorHysteresis function.", "HTScoutSetSensorLowerLimit":" void  HTScoutSetSensorLowerLimit (const byte src, const unsigned int value)\n HTScoutSetSensorLowerLimit function.", "HTScoutSetSensorUpperLimit":" void  HTScoutSetSensorUpperLimit (const byte src, const unsigned int value)\n HTScoutSetSensorUpperLimit function.", "HTScoutUnmuteSound":" void  HTScoutUnmuteSound (void)\n HTScoutUnmuteSound function.", "SetSensorMSPressure":" void  SetSensorMSPressure (const byte &port)\n Configure a mindsensors pressure sensor.", "SetSensorMSDROD":" void  SetSensorMSDROD (const byte &port, bool bActive)\n Configure a mindsensors DROD sensor.", "SetSensorNXTSumoEyes":" void  SetSensorNXTSumoEyes (const byte &port, bool bLong)\n Configure a mindsensors SumoEyes sensor.", "SensorMSPressure":" int   SensorMSPressure (const byte &port)\n Read mindsensors pressure sensor.", "SensorNXTSumoEyes":" char  SensorNXTSumoEyes (const byte &port)\n Read mindsensors NXTSumoEyes obstacle zone.", "SensorMSCompass":" int   SensorMSCompass (const byte &port, const byte i2caddr)\n Read mindsensors compass value.", "SensorMSDROD":" int   SensorMSDROD (const byte &port)\n Read mindsensors DROD value.", "SensorNXTSumoEyesRaw":" int   SensorNXTSumoEyesRaw (const byte &port)\n Read mindsensors NXTSumoEyes raw value.", "SensorMSPressureRaw":" int   SensorMSPressureRaw (const byte &port)\n Read mindsensors raw pressure value.", "ReadSensorMSAccel":" bool  ReadSensorMSAccel (const byte port, const byte i2caddr, int &x, int &y, int &z)\n Read mindsensors acceleration values.", "ReadSensorMSPlayStation":" bool  ReadSensorMSPlayStation (const byte port, const byte i2caddr, byte &btnset1, byte &btnset2, byte &xleft, byte &yleft, byte &xright, byte &yright)\n Read mindsensors playstation controller values.", "ReadSensorMSRTClock":" bool  ReadSensorMSRTClock (const byte port, byte &sec, byte &min, byte &hrs, byte &dow, byte &date, byte &month, byte &year)\n Read mindsensors RTClock values.", "ReadSensorMSTilt":" bool  ReadSensorMSTilt (const byte &port, const byte &i2caddr, byte &x, byte &y, byte &z)\n Read mindsensors tilt values.", "PFMateSend":" bool  PFMateSend (const byte &port, const byte &i2caddr, const byte &channel, const byte &motors, const byte &cmdA, const byte &spdA, const byte &cmdB, const byte &spdB)\n Send PFMate command.", "PFMateSendRaw":" bool  PFMateSendRaw (const byte &port, const byte &i2caddr, const byte &channel, const byte &b1, const byte &b2)\n Send raw PFMate command.", "MSReadValue":" int   MSReadValue (const byte port, const byte i2caddr, const byte reg, const byte numbytes)\n Read a mindsensors device value.", "MSEnergize":" char  MSEnergize (const byte port, const byte i2caddr)\n Turn on power to device.", "MSDeenergize":" char  MSDeenergize (const byte port, const byte i2caddr)\n Turn off power to device.", "MSADPAOn":" char  MSADPAOn (const byte port, const byte i2caddr)\n Turn on mindsensors ADPA mode.", "MSADPAOff":" char  MSADPAOff (const byte port, const byte i2caddr)\n Turn off mindsensors ADPA mode.", "DISTNxGP2D12":" char  DISTNxGP2D12 (const byte port, const byte i2caddr)\n Configure DISTNx as GP2D12.", "DISTNxGP2D120":" char  DISTNxGP2D120 (const byte port, const byte i2caddr)\n Configure DISTNx as GP2D120.", "DISTNxGP2YA02":" char  DISTNxGP2YA02 (const byte port, const byte i2caddr)\n Configure DISTNx as GP2YA02.", "DISTNxGP2YA21":" char  DISTNxGP2YA21 (const byte port, const byte i2caddr)\n Configure DISTNx as GP2YA21.", "DISTNxDistance":" int   DISTNxDistance (const byte port, const byte i2caddr)\n Read DISTNx distance value.", "DISTNxMaxDistance":" int   DISTNxMaxDistance (const byte port, const byte i2caddr)\n Read DISTNx maximum distance value.", "DISTNxMinDistance":" int   DISTNxMinDistance (const byte port, const byte i2caddr)\n Read DISTNx minimum distance value.", "DISTNxModuleType":" byte  DISTNxModuleType (const byte port, const byte i2caddr)\n Read DISTNx module type value.", "DISTNxNumPoints":" byte  DISTNxNumPoints (const byte port, const byte i2caddr)\n Read DISTNx num points value.", "DISTNxVoltage":" int   DISTNxVoltage (const byte port, const byte i2caddr)\n Read DISTNx voltage value.", "ACCLNxCalibrateX":" char  ACCLNxCalibrateX (const byte port, const byte i2caddr)\n Calibrate ACCL-Nx X-axis.", "ACCLNxCalibrateXEnd":" char  ACCLNxCalibrateXEnd (const byte port, const byte i2caddr)\n Stop calibrating ACCL-Nx X-axis.", "ACCLNxCalibrateY":" char  ACCLNxCalibrateY (const byte port, const byte i2caddr)\n Calibrate ACCL-Nx Y-axis.", "ACCLNxCalibrateYEnd":" char  ACCLNxCalibrateYEnd (const byte port, const byte i2caddr)\n Stop calibrating ACCL-Nx Y-axis.", "ACCLNxCalibrateZ":" char  ACCLNxCalibrateZ (const byte port, const byte i2caddr)\n Calibrate ACCL-Nx Z-axis.", "ACCLNxCalibrateZEnd":" char  ACCLNxCalibrateZEnd (const byte port, const byte i2caddr)\n Stop calibrating ACCL-Nx Z-axis.", "ACCLNxResetCalibration":" char  ACCLNxResetCalibration (const byte port, const byte i2caddr)\n Reset ACCL-Nx calibration.", "SetACCLNxSensitivity":" char  SetACCLNxSensitivity (const byte port, const byte i2caddr, byte slevel)\n Set ACCL-Nx sensitivity.", "ACCLNxSensitivity":" byte  ACCLNxSensitivity (const byte port, const byte i2caddr)\n Read ACCL-Nx sensitivity value.", "ACCLNxXOffset":" int   ACCLNxXOffset (const byte port, const byte i2caddr)\n Read ACCL-Nx X offset value.", "ACCLNxXRange":" int   ACCLNxXRange (const byte port, const byte i2caddr)\n Read ACCL-Nx X range value.", "ACCLNxYOffset":" int   ACCLNxYOffset (const byte port, const byte i2caddr)\n Read ACCL-Nx Y offset value.", "ACCLNxYRange":" int   ACCLNxYRange (const byte port, const byte i2caddr)\n Read ACCL-Nx Y range value.", "ACCLNxZOffset":" int   ACCLNxZOffset (const byte port, const byte i2caddr)\n Read ACCL-Nx Z offset value.", "ACCLNxZRange":" int   ACCLNxZRange (const byte port, const byte i2caddr)\n Read ACCL-Nx Z range value.", "PSPNxDigital":" char  PSPNxDigital (const byte &port, const byte &i2caddr)\n Configure PSPNx in digital mode.", "PSPNxAnalog":" char  PSPNxAnalog (const byte &port, const byte &i2caddr)\n Configure PSPNx in analog mode.", "NXTServoPosition":" unsigned int  NXTServoPosition (const byte &port, const byte &i2caddr, const byte servo)\n Read NXTServo servo position value.", "NXTServoSpeed":" byte  NXTServoSpeed (const byte &port, const byte &i2caddr, const byte servo)\n Read NXTServo servo speed value.", "NXTServoBatteryVoltage":" byte  NXTServoBatteryVoltage (const byte &port, const byte &i2caddr)\n Read NXTServo battery voltage value.", "SetNXTServoSpeed":" char  SetNXTServoSpeed (const byte &port, const byte &i2caddr, const byte servo, const byte &speed)\n Set NXTServo servo motor speed.", "SetNXTServoQuickPosition":" char  SetNXTServoQuickPosition (const byte &port, const byte &i2caddr, const byte servo, const byte &qpos)\n Set NXTServo servo motor quick position.", "SetNXTServoPosition":" char  SetNXTServoPosition (const byte &port, const byte &i2caddr, const byte servo, const byte &pos)\n Set NXTServo servo motor position.", "NXTServoReset":" char  NXTServoReset (const byte &port, const byte &i2caddr)\n Reset NXTServo properties.", "NXTServoHaltMacro":" char  NXTServoHaltMacro (const byte &port, const byte &i2caddr)\n Halt NXTServo macro.", "NXTServoResumeMacro":" char  NXTServoResumeMacro (const byte &port, const byte &i2caddr)\n Resume NXTServo macro.", "NXTServoPauseMacro":" char  NXTServoPauseMacro (const byte &port, const byte &i2caddr)\n Pause NXTServo macro.", "NXTServoInit":" char  NXTServoInit (const byte &port, const byte &i2caddr, const byte servo)\n Initialize NXTServo servo properties.", "NXTServoGotoMacroAddress":" char  NXTServoGotoMacroAddress (const byte &port, const byte &i2caddr, const byte &macro)\n Goto NXTServo macro address.", "NXTServoEditMacro":" char  NXTServoEditMacro (const byte &port, const byte &i2caddr)\n Edit NXTServo macro.", "NXTServoQuitEdit":" char  NXTServoQuitEdit (const byte &port)\n Quit NXTServo macro edit mode.", "NXTHIDAsciiMode":" char  NXTHIDAsciiMode (const byte &port, const byte &i2caddr)\n Set NXTHID into ASCII data mode.", "NXTHIDDirectMode":" char  NXTHIDDirectMode (const byte &port, const byte &i2caddr)\n Set NXTHID into direct data mode.", "NXTHIDTransmit":" char  NXTHIDTransmit (const byte &port, const byte &i2caddr)\n Transmit NXTHID character.", "NXTHIDLoadCharacter":" char  NXTHIDLoadCharacter (const byte &port, const byte &i2caddr, const byte &modifier, const byte &character)\n Load NXTHID character.", "NXTPowerMeterResetCounters":" char  NXTPowerMeterResetCounters (const byte &port, const byte &i2caddr)\n Reset NXTPowerMeter counters.", "NXTPowerMeterPresentCurrent":" int   NXTPowerMeterPresentCurrent (const byte &port, const byte &i2caddr)\n Read NXTPowerMeter present current.", "NXTPowerMeterPresentVoltage":" int   NXTPowerMeterPresentVoltage (const byte &port, const byte &i2caddr)\n Read NXTPowerMeter present voltage.", "NXTPowerMeterCapacityUsed":" int   NXTPowerMeterCapacityUsed (const byte &port, const byte &i2caddr)\n Read NXTPowerMeter capacity used.", "NXTPowerMeterPresentPower":" int   NXTPowerMeterPresentPower (const byte &port, const byte &i2caddr)\n Read NXTPowerMeter present power.", "NXTPowerMeterTotalPowerConsumed":" long  NXTPowerMeterTotalPowerConsumed (const byte &port, const byte &i2caddr)\n Read NXTPowerMeter total power consumed.", "NXTPowerMeterMaxCurrent":" int   NXTPowerMeterMaxCurrent (const byte &port, const byte &i2caddr)\n Read NXTPowerMeter maximum current.", "NXTPowerMeterMinCurrent":" int   NXTPowerMeterMinCurrent (const byte &port, const byte &i2caddr)\n Read NXTPowerMeter minimum current.", "NXTPowerMeterMaxVoltage":" int   NXTPowerMeterMaxVoltage (const byte &port, const byte &i2caddr)\n Read NXTPowerMeter maximum voltage.", "NXTPowerMeterMinVoltage":" int   NXTPowerMeterMinVoltage (const byte &port, const byte &i2caddr)\n Read NXTPowerMeter minimum voltage.", "NXTPowerMeterElapsedTime":" long  NXTPowerMeterElapsedTime (const byte &port, const byte &i2caddr)\n Read NXTPowerMeter elapsed time.", "NXTPowerMeterErrorCount":" int   NXTPowerMeterErrorCount (const byte &port, const byte &i2caddr)\n Read NXTPowerMeter error count.", "NXTLineLeaderPowerDown":" char  NXTLineLeaderPowerDown (const byte &port, const byte &i2caddr)\n Powerdown NXTLineLeader device.", "NXTLineLeaderPowerUp":" char  NXTLineLeaderPowerUp (const byte &port, const byte &i2caddr)\n Powerup NXTLineLeader device.", "NXTLineLeaderInvert":" char  NXTLineLeaderInvert (const byte &port, const byte &i2caddr)\n Invert NXTLineLeader colors.", "NXTLineLeaderReset":" char  NXTLineLeaderReset (const byte &port, const byte &i2caddr)\n Reset NXTLineLeader color inversion.", "NXTLineLeaderSnapshot":" char  NXTLineLeaderSnapshot (const byte &port, const byte &i2caddr)\n Take NXTLineLeader line snapshot.", "NXTLineLeaderCalibrateWhite":" char  NXTLineLeaderCalibrateWhite (const byte &port, const byte &i2caddr)\n Calibrate NXTLineLeader white color.", "NXTLineLeaderCalibrateBlack":" char  NXTLineLeaderCalibrateBlack (const byte &port, const byte &i2caddr)\n Calibrate NXTLineLeader black color.", "NXTLineLeaderSteering":" char  NXTLineLeaderSteering (const byte &port, const byte &i2caddr)\n Read NXTLineLeader steering.", "NXTLineLeaderAverage":" char  NXTLineLeaderAverage (const byte &port, const byte &i2caddr)\n Read NXTLineLeader average.", "NXTLineLeaderResult":" byte  NXTLineLeaderResult (const byte &port, const byte &i2caddr)\n Read NXTLineLeader result.", "SetNXTLineLeaderSetpoint":" char  SetNXTLineLeaderSetpoint (const byte &port, const byte &i2caddr, const byte &value)\n Write NXTLineLeader setpoint.", "SetNXTLineLeaderKpValue":" char  SetNXTLineLeaderKpValue (const byte &port, const byte &i2caddr, const byte &value)\n Write NXTLineLeader Kp value.", "SetNXTLineLeaderKiValue":" char  SetNXTLineLeaderKiValue (const byte &port, const byte &i2caddr, const byte &value)\n Write NXTLineLeader Ki value.", "SetNXTLineLeaderKdValue":" char  SetNXTLineLeaderKdValue (const byte &port, const byte &i2caddr, const byte &value)\n Write NXTLineLeader Kd value.", "SetNXTLineLeaderKpFactor":" char  SetNXTLineLeaderKpFactor (const byte &port, const byte &i2caddr, const byte &value)\n Write NXTLineLeader Kp factor.", "SetNXTLineLeaderKiFactor":" char  SetNXTLineLeaderKiFactor (const byte &port, const byte &i2caddr, const byte &value)\n Write NXTLineLeader Ki factor.", "SetNXTLineLeaderKdFactor":" char  SetNXTLineLeaderKdFactor (const byte &port, const byte &i2caddr, const byte &value)\n Write NXTLineLeader Kd factor.", "NRLink2400":" char  NRLink2400 (const byte port, const byte i2caddr)\n Configure NRLink in 2400 baud mode.", "NRLink4800":" char  NRLink4800 (const byte port, const byte i2caddr)\n Configure NRLink in 4800 baud mode.", "NRLinkFlush":" char  NRLinkFlush (const byte port, const byte i2caddr)\n Flush NRLink buffers.", "NRLinkIRLong":" char  NRLinkIRLong (const byte port, const byte i2caddr)\n Configure NRLink in IR long mode.", "NRLinkIRShort":" char  NRLinkIRShort (const byte port, const byte i2caddr)\n Configure NRLink in IR short mode.", "NRLinkSetPF":" char  NRLinkSetPF (const byte port, const byte i2caddr)\n Configure NRLink in power function mode.", "NRLinkSetRCX":" char  NRLinkSetRCX (const byte port, const byte i2caddr)\n Configure NRLink in RCX mode.", "NRLinkSetTrain":" char  NRLinkSetTrain (const byte port, const byte i2caddr)\n Configure NRLink in IR train mode.", "NRLinkTxRaw":" char  NRLinkTxRaw (const byte port, const byte i2caddr)\n Configure NRLink in raw IR transmit mode.", "NRLinkStatus":" byte  NRLinkStatus (const byte port, const byte i2caddr)\n Read NRLink status.", "RunNRLinkMacro":" char  RunNRLinkMacro (const byte port, const byte i2caddr, const byte macro)\n Run NRLink macro.", "WriteNRLinkBytes":" char  WriteNRLinkBytes (const byte port, const byte i2caddr, const byte data[])\n Write data to NRLink.", "ReadNRLinkBytes":" bool  ReadNRLinkBytes (const byte port, const byte i2caddr, byte &data[])\n Read data from NRLink.", "MSIRTrain":" char  MSIRTrain (const byte port, const byte i2caddr, const byte channel, const byte func)\n MSIRTrain function.", "MSPFComboDirect":" char  MSPFComboDirect (const byte port, const byte i2caddr, const byte channel, const byte outa, const byte outb)\n MSPFComboDirect function.", "MSPFComboPWM":" char  MSPFComboPWM (const byte port, const byte i2caddr, const byte channel, const byte outa, const byte outb)\n MSPFComboPWM function.", "MSPFRawOutput":" char  MSPFRawOutput (const byte port, const byte i2caddr, const byte nibble0, const byte nibble1, const byte nibble2)\n MSPFRawOutput function.", "MSPFRepeat":" char  MSPFRepeat (const byte port, const byte i2caddr, const byte count, const unsigned int delay)\n MSPFRepeat function.", "MSPFSingleOutputCST":" char  MSPFSingleOutputCST (const byte port, const byte i2caddr, const byte channel, const byte out, const byte func)\n MSPFSingleOutputCST function.", "MSPFSingleOutputPWM":" char  MSPFSingleOutputPWM (const byte port, const byte i2caddr, const byte channel, const byte out, const byte func)\n MSPFSingleOutputPWM function.", "MSPFSinglePin":" char  MSPFSinglePin (const byte port, const byte i2caddr, const byte channel, const byte out, const byte pin, const byte func, bool cont)\n MSPFSinglePin function.", "MSPFTrain":" char  MSPFTrain (const byte port, const byte i2caddr, const byte channel, const byte func)\n MSPFTrain function.", "MSRCXSetNRLinkPort":" void  MSRCXSetNRLinkPort (const byte port, const byte i2caddr)\n MSRCXSetIRLinkPort function.", "MSRCXBatteryLevel":" int   MSRCXBatteryLevel (void)\n MSRCXBatteryLevel function.", "MSRCXPoll":" int   MSRCXPoll (const byte src, const byte value)\n MSRCXPoll function.", "MSRCXPollMemory":" int   MSRCXPollMemory (const unsigned int address)\n MSRCXPollMemory function.", "MSRCXAbsVar":" void  MSRCXAbsVar (const byte varnum, const byte byte src, const unsigned int value)\n MSRCXAbsVar function.", "MSRCXAddToDatalog":" void  MSRCXAddToDatalog (const byte src, const unsigned int value)\n MSRCXAddToDatalog function.", "MSRCXAndVar":" void  MSRCXAndVar (const byte varnum, const byte src, const unsigned int value)\n MSRCXAndVar function.", "MSRCXBoot":" void  MSRCXBoot (void)\n MSRCXBoot function.", "MSRCXCalibrateEvent":" void  MSRCXCalibrateEvent (const byte evt, const byte low, const byte hi, const byte hyst)\n MSRCXCalibrateEvent function.", "MSRCXClearAllEvents":" void  MSRCXClearAllEvents (void)\n MSRCXClearAllEvents function.", "MSRCXClearCounter":" void  MSRCXClearCounter (const byte counter)\n MSRCXClearCounter function.", "MSRCXClearMsg":" void  MSRCXClearMsg (void)\n MSRCXClearMsg function.", "MSRCXClearSensor":" void  MSRCXClearSensor (const byte port)\n MSRCXClearSensor function.", "MSRCXClearSound":" void  MSRCXClearSound (void)\n MSRCXClearSound function.", "MSRCXClearTimer":" void  MSRCXClearTimer (const byte timer)\n MSRCXClearTimer function.", "MSRCXCreateDatalog":" void  MSRCXCreateDatalog (const unsigned int size)\n MSRCXCreateDatalog function.", "MSRCXDecCounter":" void  MSRCXDecCounter (const byte counter)\n MSRCXDecCounter function.", "MSRCXDeleteSub":" void  MSRCXDeleteSub (const byte s)\n MSRCXDeleteSub function.", "MSRCXDeleteSubs":" void  MSRCXDeleteSubs (void)\n MSRCXDeleteSubs function.", "MSRCXDeleteTask":" void  MSRCXDeleteTask (const byte t)\n MSRCXDeleteTask function.", "MSRCXDeleteTasks":" void  MSRCXDeleteTasks (void)\n MSRCXDeleteTasks function.", "MSRCXDisableOutput":" void  MSRCXDisableOutput (const byte outputs)\n MSRCXDisableOutput function.", "MSRCXDivVar":" void  MSRCXDivVar (const byte varnum, const byte src, const unsigned int value)\n MSRCXDivVar function.", "MSRCXEnableOutput":" void  MSRCXEnableOutput (const byte outputs)\n MSRCXEnableOutput function.", "MSRCXEvent":" void  MSRCXEvent (const byte src, const unsigned int value)\n MSRCXEvent function.", "MSRCXFloat":" void  MSRCXFloat (const byte outputs)\n MSRCXFloat function.", "MSRCXFwd":" void  MSRCXFwd (const byte outputs)\n MSRCXFwd function.", "MSRCXIncCounter":" void  MSRCXIncCounter (const byte counter)\n MSRCXIncCounter function.", "MSRCXInvertOutput":" void  MSRCXInvertOutput (const byte outputs)\n MSRCXInvertOutput function.", "MSRCXMulVar":" void  MSRCXMulVar (const byte varnum, const byte src, unsigned int value)\n MSRCXMulVar function.", "MSRCXMuteSound":" void  MSRCXMuteSound (void)\n MSRCXMuteSound function.", "MSRCXObvertOutput":" void  MSRCXObvertOutput (const byte outputs)\n MSRCXObvertOutput function.", "MSRCXOff":" void  MSRCXOff (const byte outputs)\n MSRCXOff function.", "MSRCXOn":" void  MSRCXOn (const byte outputs)\n MSRCXOn function.", "MSRCXOnFor":" void  MSRCXOnFor (const byte outputs, const unsigned int ms)\n MSRCXOnFor function.", "MSRCXOnFwd":" void  MSRCXOnFwd (const byte outputs)\n MSRCXOnFwd function.", "MSRCXOnRev":" void  MSRCXOnRev (const byte outputs)\n MSRCXOnRev function.", "MSRCXOrVar":" void  MSRCXOrVar (const byte varnum, const byte src, const unsigned int value)\n MSRCXOrVar function.", "MSRCXPBTurnOff":" void  MSRCXPBTurnOff (void)\n MSRCXPBTurnOff function.", "MSRCXPing":" void  MSRCXPing (void)\n MSRCXPing function.", "MSRCXPlaySound":" void  MSRCXPlaySound (const byte snd)\n MSRCXPlaySound function.", "MSRCXPlayTone":" void  MSRCXPlayTone (const unsigned int freq, const byte duration)\n MSRCXPlayTone function.", "MSRCXPlayToneVar":" void  MSRCXPlayToneVar (const byte varnum, const byte duration)\n MSRCXPlayToneVar function.", "MSRCXRemote":" void  MSRCXRemote (unsigned int cmd)\n MSRCXRemote function.", "MSRCXReset":" void  MSRCXReset (void)\n MSRCXReset function.", "MSRCXRev":" void  MSRCXRev (const byte outputs)\n MSRCXRev function.", "MSRCXSelectDisplay":" void  MSRCXSelectDisplay (const byte src, const unsigned int value)\n MSRCXSelectDisplay function.", "MSRCXSelectProgram":" void  MSRCXSelectProgram (const byte prog)\n MSRCXSelectProgram function.", "MSRCXSendSerial":" void  MSRCXSendSerial (const byte first, const byte count)\n MSRCXSendSerial function.", "MSRCXSet":" void  MSRCXSet (const byte dstsrc, const byte dstval, const byte src, unsigned int value)\n MSRCXSet function.", "MSRCXSetDirection":" void  MSRCXSetDirection (const byte outputs, const byte dir)\n MSRCXSetDirection function.", "MSRCXSetEvent":" void  MSRCXSetEvent (const byte evt, const byte src, const byte type)\n MSRCXSetEvent function.", "MSRCXSetGlobalDirection":" void  MSRCXSetGlobalDirection (const byte outputs, const byte dir)\n MSRCXSetGlobalDirection function.", "MSRCXSetGlobalOutput":" void  MSRCXSetGlobalOutput (const byte outputs, const byte mode)\n MSRCXSetGlobalOutput function.", "MSRCXSetMaxPower":" void  MSRCXSetMaxPower (const byte outputs, const byte pwrsrc, const byte pwrval)\n MSRCXSetMaxPower function.", "MSRCXSetMessage":" void  MSRCXSetMessage (const byte msg)\n MSRCXSetMessage function.", "MSRCXSetOutput":" void  MSRCXSetOutput (const byte outputs, const byte mode)\n MSRCXSetOutput function.", "MSRCXSetPower":" void  MSRCXSetPower (const byte outputs, const byte pwrsrc, const byte pwrval)\n MSRCXSetPower function.", "MSRCXSetPriority":" void  MSRCXSetPriority (const byte p)\n MSRCXSetPriority function.", "MSRCXSetSensorMode":" void  MSRCXSetSensorMode (const byte port, const byte mode)\n MSRCXSetSensorMode function.", "MSRCXSetSensorType":" void  MSRCXSetSensorType (const byte port, const byte type)\n MSRCXSetSensorType function.", "MSRCXSetSleepTime":" void  MSRCXSetSleepTime (const byte t)\n MSRCXSetSleepTime function.", "MSRCXSetTxPower":" void  MSRCXSetTxPower (const byte pwr)\n MSRCXSetTxPower function.", "MSRCXSetUserDisplay":" void  MSRCXSetUserDisplay (const byte src, const unsigned int value, const byte precision)\n MSRCXSetUserDisplay function.", "MSRCXSetVar":" void  MSRCXSetVar (const byte varnum, const byte src, const unsigned int value)\n MSRCXSetVar function.", "MSRCXSetWatch":" void  MSRCXSetWatch (const byte hours, const byte minutes)\n MSRCXSetWatch function.", "MSRCXSgnVar":" void  MSRCXSgnVar (const byte varnum, const byte src, const unsigned int value)\n MSRCXSgnVar function.", "MSRCXStartTask":" void  MSRCXStartTask (const byte t)\n MSRCXStartTask function.", "MSRCXStopAllTasks":" void  MSRCXStopAllTasks (void)\n MSRCXStopAllTasks function.", "MSRCXStopTask":" void  MSRCXStopTask (const byte t)\n MSRCXStopTask function.", "MSRCXSubVar":" void  MSRCXSubVar (const byte varnum, const byte src, const unsigned int value)\n MSRCXSubVar function.", "MSRCXSumVar":" void  MSRCXSumVar (const byte varnum, const byte src, const unsigned int value)\n MSRCXSumVar function.", "MSRCXToggle":" void  MSRCXToggle (const byte outputs)\n MSRCXToggle function.", "MSRCXUnlock":" void  MSRCXUnlock (void)\n MSRCXUnlock function.", "MSRCXUnmuteSound":" void  MSRCXUnmuteSound (void)\n MSRCXUnmuteSound function.", "MSScoutCalibrateSensor":" void  MSScoutCalibrateSensor (void)\n MSScoutCalibrateSensor function.", "MSScoutMuteSound":" void  MSScoutMuteSound (void)\n MSScoutMuteSound function.", "MSScoutSelectSounds":" void  MSScoutSelectSounds (const byte grp)\n MSScoutSelectSounds function.", "MSScoutSendVLL":" void  MSScoutSendVLL (const byte src, const unsigned int value)\n MSScoutSendVLL function.", "MSScoutSetCounterLimit":" void  MSScoutSetCounterLimit (const byte ctr, const byte src, const unsigned int value)\n MSScoutSetCounterLimit function.", "MSScoutSetEventFeedback":" void  MSScoutSetEventFeedback (const byte src, const unsigned int value)\n MSScoutSetEventFeedback function.", "MSScoutSetLight":" void  MSScoutSetLight (const byte x)\n MSScoutSetLight function.", "MSScoutSetScoutMode":" void  MSScoutSetScoutMode (const byte mode)\n MSScoutSetScoutMode function.", "MSScoutSetScoutRules":" void  MSScoutSetScoutRules (const byte m, const byte t, const byte l, const byte tm, const byte fx)\n MSScoutSetScoutRules function.", "MSScoutSetSensorClickTime":" void  MSScoutSetSensorClickTime (const byte src, const unsigned int value)\n MSScoutSetSensorClickTime function.", "MSScoutSetSensorHysteresis":" void  MSScoutSetSensorHysteresis (const byte src, const unsigned int value)\n MSScoutSetSensorHysteresis function.", "MSScoutSetSensorLowerLimit":" void  MSScoutSetSensorLowerLimit (const byte src, const unsigned int value)\n MSScoutSetSensorLowerLimit function.", "MSScoutSetSensorUpperLimit":" void  MSScoutSetSensorUpperLimit (const byte src, const unsigned int value)\n MSScoutSetSensorUpperLimit function.", "MSScoutSetTimerLimit":" void  MSScoutSetTimerLimit (const byte tmr, const byte src, const unsigned int value)\n MSScoutSetTimerLimit function.", "MSScoutUnmuteSound":" void  MSScoutUnmuteSound (void)\n MSScoutUnmuteSound function.", "RFIDInit":" bool  RFIDInit (const byte &port)\n RFIDInit function.", "RFIDMode":" bool  RFIDMode (const byte &port, const byte &mode)\n RFIDMode function.", "RFIDStatus":" byte  RFIDStatus (const byte &port)\n RFIDStatus function.", "RFIDRead":" bool  RFIDRead (const byte &port, byte &output[])\n RFIDRead function.", "RFIDStop":" bool  RFIDStop (const byte &port)\n RFIDStop function.", "RFIDReadSingle":" bool  RFIDReadSingle (const byte &port, byte &output[])\n RFIDReadSingle function.", "RFIDReadContinuous":" bool  RFIDReadContinuous (const byte &port, byte &output[])\n RFIDReadContinuous function.", "SensorDIGPSStatus":" bool  SensorDIGPSStatus (byte port)\n SensorDIGPSStatus function.", "SensorDIGPSTime":" long  SensorDIGPSTime (byte port)\n SensorDIGPSTime function.", "SensorDIGPSLatitude":" long  SensorDIGPSLatitude (byte port)\n SensorDIGPSLatitude function.", "SensorDIGPSLongitude":" long  SensorDIGPSLongitude (byte port)\n SensorDIGPSLongitude function.", "SensorDIGPSVelocity":" long  SensorDIGPSVelocity (byte port)\n SensorDIGPSVelocity function.", "SensorDIGPSHeading":" int   SensorDIGPSHeading (byte port)\n SensorDIGPSHeading function.", "SensorDIGPSDistanceToWaypoint":" long  SensorDIGPSDistanceToWaypoint (byte port)\n SensorDIGPSDistanceToWaypoint function.", "SensorDIGPSHeadingToWaypoint":" int   SensorDIGPSHeadingToWaypoint (byte port)\n SensorDIGPSHeadingToWaypoint function.", "SensorDIGPSRelativeHeading":" int   SensorDIGPSRelativeHeading (byte port)\n SensorDIGPSRelativeHeading function.", "SetSensorDIGPSWaypoint":" bool  SetSensorDIGPSWaypoint (byte port, long latitude, long longitude)\n SetSensorDIGPSWaypoint function.", "SetSensorDIGyroEx":" bool  SetSensorDIGyroEx (const byte port, byte scale, byte odr, byte bw)\n SetSensorDIGyroEx function.", "SetSensorDIGyro":" bool  SetSensorDIGyro (const byte port)\n SetSensorDIGyro function.", "ReadSensorDIGyroRaw":" bool  ReadSensorDIGyroRaw (const byte port, VectorType &vector)\n ReadSensorDIGyroRaw function.", "ReadSensorDIGyro":" bool  ReadSensorDIGyro (const byte port, VectorType &vector)\n ReadSensorDIGyro function.", "SensorDIGyroTemperature":" int   SensorDIGyroTemperature (const byte port)\n SensorDIGyroTemperature function.", "SensorDIGyroStatus":" byte  SensorDIGyroStatus (const byte port)\n SensorDIGyroStatus function.", "SetSensorDIAcclEx":" bool  SetSensorDIAcclEx (const byte port, byte mode)\n SetSensorDIAcclEx function.", "SetSensorDIAccl":" bool  SetSensorDIAccl (const byte port)\n SetSensorDIAccl function.", "ReadSensorDIAcclRaw":" bool  ReadSensorDIAcclRaw (const byte port, VectorType &vector)\n ReadSensorDIAcclRaw function.", "ReadSensorDIAccl":" bool  ReadSensorDIAccl (const byte port, VectorType &vector)\n ReadSensorDIAccl function.", "ReadSensorDIAccl8Raw":" bool  ReadSensorDIAccl8Raw (const byte port, VectorType &vector)\n ReadSensorDIAccl8Raw function.", "ReadSensorDIAccl8":" bool  ReadSensorDIAccl8 (const byte port, VectorType &vector)\n ReadSensorDIAccl8 function.", "SensorDIAcclStatus":" byte  SensorDIAcclStatus (const byte port)\n SensorDIAcclStatus function.", "ReadSensorDIAcclDrift":" bool  ReadSensorDIAcclDrift (const byte port, int &x, int &y, int &z)\n ReadSensorDIAcclDrift function.", "SetSensorDIAcclDrift":" bool  SetSensorDIAcclDrift (const byte port, int x, int y, int z)\n SetSensorDIAcclDrift function.", "ResetMIXG1300L":" bool  ResetMIXG1300L (byte port)\n ResetMIXG1300L function.", "SensorMIXG1300LScale":" int   SensorMIXG1300LScale (byte port)\n SensorMIXG1300LScale function.", "SetSensorMIXG1300LScale":" bool  SetSensorMIXG1300LScale (byte port, const byte scale)\n SetSensorMIXG1300LScale function.", "ReadSensorMIXG1300L":" bool  ReadSensorMIXG1300L (byte port, XGPacketType &packet)\n ReadSensorMIXG1300L function.", "sqrt":" float   sqrt (float x)\n Compute square root.", "cos":" float   cos (float x)\n Compute cosine.", "sin":" float   sin (float x)\n Compute sine.", "tan":" float   tan (float x)\n Compute tangent.", "acos":" float   acos (float x)\n Compute arc cosine.", "asin":" float   asin (float x)\n Compute arc sine.", "atan":" float   atan (float x)\n Compute arc tangent.", "atan2":" float   atan2 (float y, float x)\n Compute arc tangent with 2 parameters.", "cosh":" float   cosh (float x)\n Compute hyperbolic cosine.", "sinh":" float   sinh (float x)\n Compute hyperbolic sine.", "tanh":" float   tanh (float x)\n Compute hyperbolic tangent.", "exp":" float   exp (float x)\n Compute exponential function.", "log":" float   log (float x)\n Compute natural logarithm.", "log10":" float   log10 (float x)\n Compute common logarithm.", "trunc":" long  trunc (float x)\n Compute integral part.", "frac":" float   frac (float x)\n Compute fractional part.", "pow":" float   pow (float base, float exponent)\n Raise to power.", "ceil":" float   ceil (float x)\n Round up value.", "floor":" float   floor (float x)\n Round down value.", "muldiv32":" long  muldiv32 (long a, long b, long c)\n Multiply and divide.", "cosd":" float   cosd (float x)\n Compute cosine (degrees).", "sind":" float   sind (float x)\n Compute sine (degrees).", "tand":" float   tand (float x)\n Compute tangent (degrees).", "acosd":" float   acosd (float x)\n Compute arc cosine (degrees).", "asind":" float   asind (float x)\n Compute arc sine (degrees).", "atand":" float   atand (float x)\n Compute arc tangent (degrees).", "atan2d":" float   atan2d (float y, float x)\n Compute arc tangent with 2 parameters (degrees).", "coshd":" float   coshd (float x)\n Compute hyperbolic cosine (degrees).", "sinhd":" float   sinhd (float x)\n Compute hyperbolic sine (degrees).", "tanhd":" float   tanhd (float x)\n Compute hyperbolic tangent (degrees).", "bcd2dec":" byte  bcd2dec (byte bcd)\n Convert from BCD to decimal Return the decimal equivalent of the binary coded decimal value provided.", "isNAN":" bool  isNAN (float value)\n Is the value NaN.", "sign":" char  sign (variant num)\n Sign value.", "VectorCross":" void  VectorCross (VectorType a, VectorType b, VectorType &out)\n VectorCross function.", "VectorDot":" float   VectorDot (VectorType a, VectorType b)\n VectorDot function.", "VectorNormalize":" void  VectorNormalize (VectorType &a)\n VectorNormalize function.", "fclose":" int   fclose (byte handle)\n Close file.", "remove":" int   remove (string filename)\n Remove file.", "rename":" int   rename (string old, string new)\n Rename file.", "fgetc":" char  fgetc (byte handle)\n Get character from file.", "fgets":" string  fgets (string &str, int num, byte handle)\n Get string from file.", "feof":" int   feof (byte handle)\n Check End-of-file indicator.", "set_fopen_size":" void  set_fopen_size (unsigned long fsize)\n Set the default fopen file size.", "fopen":" byte  fopen (string filename, const string mode)\n Open file.", "fflush":" int   fflush (byte handle)\n Flush file.", "ftell":" unsigned long   ftell (byte handle)\n Get current position in file.", "fputc":" char  fputc (char ch, byte handle)\n Write character to file.", "fputs":" int   fputs (string str, byte handle)\n Write string to file.", "getchar":" int   getchar ()\n Get character from stdin.", "printf":" void  printf (string format, variant value)\n Print formatted data to stdout.", "fprintf":" void  fprintf (byte handle, string format, variant value)\n Write formatted data to file.", "sprintf":" void  sprintf (string &str, string format, variant value)\n Write formatted data to string.", "fseek":" int   fseek (byte handle, long offset, int origin)\n Reposition file position indicator.", "rewind":" void  rewind (byte handle)\n Set position indicator to the beginning.", "abort":" void  abort ()\n Abort current process.", "abs":" variant   abs (variant num)\n Absolute value.", "srand":" long  srand (long seed)\n Seed the random number generator.", "rand":" unsigned long   rand ()\n Generate random number.", "Random":" int   Random (unsigned int n=0)\n Generate random number.", "SysRandomNumber":" void  SysRandomNumber (RandomNumberType &args)\n Draw a random number.", "SysRandomEx":" void  SysRandomEx (RandomExType &args)\n Call the enhanced random number function.", "atoi":" int   atoi (const string &str)\n Convert string to integer.", "atol":" long  atol (const string &str)\n Convert string to long integer.", "labs":" long  labs (long n)\n Absolute value.", "atof":" float   atof (const string &str)\n Convert string to float.", "strtod":" float   strtod (const string &str, string &endptr)\n Convert string to float.", "strtol":" long  strtol (const string &str, string &endptr, int base=10)\n Convert string to long integer.", "strtoul":" long  strtoul (const string &str, string &endptr, int base=10)\n Convert string to unsigned long integer.", "div":" div_t   div (int numer, int denom)\n Integral division.", "ldiv":" ldiv_t  ldiv (long numer, long denom)\n Integral division.", "StrToNum":" variant   StrToNum (string str)\n Convert string to number.", "StrLen":" unsigned int  StrLen (string str)\n Get string length.", "StrIndex":" byte  StrIndex (string str, unsigned int idx)\n Extract a character from a string.", "NumToStr":" string  NumToStr (variant num)\n Convert number to string.", "StrCat":" string  StrCat (string str1, string str2, string strN)\n Concatenate strings.", "SubStr":" string  SubStr (string str, unsigned int idx, unsigned int len)\n Extract a portion of a string.", "Flatten":" string  Flatten (variant num)\n Flatten a number to a string.", "StrReplace":" string  StrReplace (string str, unsigned int idx, string strnew)\n Replace a portion of a string.", "FormatNum":" string  FormatNum (string fmt, variant num)\n Format a number.", "FormatVal":" string  FormatVal (string fmt, variant val)\n Format a value.", "FlattenVar":" string  FlattenVar (variant x)\n Flatten any data to a string.", "UnflattenVar":" int   UnflattenVar (string str, variant &x)\n Unflatten a string into a data type.", "Pos":" int   Pos (string Substr, string S)\n Find substring position.", "ByteArrayToStr":" string  ByteArrayToStr (byte data[])\n Convert a byte array to a string.", "ByteArrayToStrEx":" void  ByteArrayToStrEx (byte data[], string &str)\n Convert a byte array to a string.", "StrToByteArray":" void  StrToByteArray (string str, byte &data[])\n Convert a string to a byte array.", "Copy":" string  Copy (string str, unsigned int idx, unsigned int len)\n Copy a portion of a string.", "MidStr":" string  MidStr (string str, unsigned int idx, unsigned int len)\n Copy a portion from the middle of a string.", "RightStr":" string  RightStr (string str, unsigned int size)\n Copy a portion from the end of a string.", "LeftStr":" string  LeftStr (string str, unsigned int size)\n Copy a portion from the start of a string.", "strlen":" int   strlen (const string &str)\n Get string length.", "strcat":" string  strcat (string &dest, const string &src)\n Concatenate strings.", "strncat":" string  strncat (string &dest, const string &src, unsigned int num)\n Append characters from string.", "strcpy":" string  strcpy (string &dest, const string &src)\n Copy string.", "strncpy":" string  strncpy (string &dest, const string &src, unsigned int num)\n Copy characters from string.", "strcmp":" int   strcmp (const string &str1, const string &str2)\n Compare two strings.", "strncmp":" int   strncmp (const string &str1, const string &str2, unsigned int num)\n Compare characters of two strings.", "memcpy":" void  memcpy (variant dest, variant src, byte num)\n Copy memory.", "memmove":" void  memmove (variant dest, variant src, byte num)\n Move memory.", "memcmp":" char  memcmp (variant ptr1, variant ptr2, byte num)\n Compare two blocks of memory.", "addressOf":" unsigned long   addressOf (variant data)\n Get the absolute address of a variable.", "reladdressOf":" unsigned long   reladdressOf (variant data)\n Get the relative address of a variable.", "addressOfEx":" unsigned long   addressOfEx (variant data, bool relative)\n Get the absolute or relative address of a variable.", "isupper":" int   isupper (int c)\n Check if character is uppercase letter.", "islower":" int   islower (int c)\n Check if character is lowercase letter.", "isalpha":" int   isalpha (int c)\n Check if character is alphabetic.", "isdigit":" int   isdigit (int c)\n Check if character is decimal digit.", "isalnum":" int   isalnum (int c)\n Check if character is alphanumeric.", "isspace":" int   isspace (int c)\n Check if character is a white-space.", "iscntrl":" int   iscntrl (int c)\n Check if character is a control character.", "isprint":" int   isprint (int c)\n Check if character is printable.", "isgraph":" int   isgraph (int c)\n Check if character has graphical representation.", "ispunct":" int   ispunct (int c)\n Check if character is a punctuation.", "isxdigit":" int   isxdigit (int c)\n Check if character is hexadecimal digit.", "toupper":" int   toupper (int c)\n Convert lowercase letter to uppercase.", "tolower":" int   tolower (int c)\n Convert uppercase letter to lowercase.", "glInit":" void  glInit ()\n Initialize graphics library.", "glSet":" void  glSet (int glType, int glValue)\n Set graphics library options.", "glBeginObject":" int   glBeginObject ()\n Begin defining an object.", "glEndObject":" void  glEndObject ()\n Stop defining an object.", "glObjectAction":" void  glObjectAction (int glObjectId, int glAction, int glValue)\n Perform an object action.", "glAddVertex":" void  glAddVertex (int glX, int glY, int glZ)\n Add a vertex to an object.", "glBegin":" void  glBegin (int glBeginMode)\n Begin a new polygon for the current object.", "glEnd":" void  glEnd ()\n Finish a polygon for the current object.", "glBeginRender":" void  glBeginRender ()\n Begin a new render.", "glCallObject":" void  glCallObject (int glObjectId)\n Call a graphic object.", "glFinishRender":" void  glFinishRender ()\n Finish the current render.", "glSetAngleX":" void  glSetAngleX (int glValue)\n Set the X axis angle.", "glAddToAngleX":" void  glAddToAngleX (int glValue)\n Add to the X axis angle.", "glSetAngleY":" void  glSetAngleY (int glValue)\n Set the Y axis angle.", "glAddToAngleY":" void  glAddToAngleY (int glValue)\n Add to the Y axis angle.", "glSetAngleZ":" void  glSetAngleZ (int glValue)\n Set the Z axis angle.", "glAddToAngleZ":" void  glAddToAngleZ (int glValue)\n Add to the Z axis angle.", "glSin32768":" int   glSin32768 (int glAngle)\n Table-based sine scaled by 32768.", "glCos32768":" int   glCos32768 (int glAngle)\n Table-based cosine scaled by 32768.", "glBox":" int   glBox (int glMode, int glSizeX, int glSizeY, int glSizeZ)\n Create a 3D box.", "glCube":" int   glCube (int glMode, int glSize)\n Create a 3D cube.", "glPyramid":" int   glPyramid (int glMode, int glSizeX, int glSizeY, int glSizeZ)\n Create a 3D pyramid.", "PosRegEnable":" void  PosRegEnable (byte output, byte p=PID_3, byte i=PID_1, byte d=PID_1)\n Enable absolute position regulation with PID factors.", "PosRegSetAngle":" void  PosRegSetAngle (byte output, long angle)\n Change the current value for set angle.", "PosRegAddAngle":" void  PosRegAddAngle (byte output, long angle_add)\n Add to the current value for set angle.", "PosRegSetMax":" void  PosRegSetMax (byte output, byte max_speed, byte max_acceleration)\n Set maximum limits. "}
    knownParameters= {"byte outputs": "'outputs' should be one of OUT_A, OUT_AB, OUT_ABC, etc. Represents what motors will be driven.",
    "char pwr": "'pwr' should be a number ranging from 0-100. Represents how much power to give the motor.",
    "unsigned long ms": "'ms' should be the number of milliseconds you want to wait. There are 1,000 milliseconds in a second.",
    "bool stop": "'stop' should be true if the motors should stop after the command, or false if they should keep going.",
    "const byte &port": "'port' should be one of IN_1, IN_2, etc. Represents which sensor you want to read."}
